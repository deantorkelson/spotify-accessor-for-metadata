{"version":3,"sources":["static/black-logo.png","static/green-logo.png","SpotifyApiService/SpotifyApiService.tsx","Search/Search.tsx","models/AudioFeatures.ts","Homepage/Homepage.tsx","Navbar/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SpotifyApiService","api_url","process","REACT_APP_USE_LOCAL_BACKEND","this","searchQuery","fetch","then","response","json","trackUri","artistUri","Search","props","spotifyApiService","state","searchResults","trackName","artistName","trackMetadata","artistMetadata","loading","setState","searchTracks","data","tracks","items","songUri","fetchTrackMetadata","fetchArtistMetadata","length","Spinner","animation","className","map","result","createSearchResult","key","uri","Button","variant","onClick","name","artists","src","album","images","url","alt","metadata","duration_ms","mode","keyNumberToString","modeNumberToString","tempo","time_signature","Tooltip","title","fontSize","Slider","disabled","track","value","acousticness","max","danceability","energy","instrumentalness","liveness","loudness","speechiness","valence","followers","displayGenres","genres","total","toLocaleString","popularity","join","Form","inline","Control","type","onKeyPress","event","preventDefault","searchSubmit","onChange","target","blackLogo","createSearchResultList","displayTrackMetadata","displayArtistMetadata","React","Component","Homepage","href","getReadmeLink","getGithubIssuesLink","Navbar","to","greenLogo","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99914f61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black-logo.5e670a4b.png\";","module.exports = __webpack_public_path__ + \"static/media/green-logo.feb227e2.png\";","export class SpotifyApiService {\n    private api_url: string;\n\n    constructor() {\n        if(process.env.REACT_APP_USE_LOCAL_BACKEND === \"1\") {\n            this.api_url = 'http://127.0.0.1:5000'\n          } else {\n            this.api_url = 'https://spotify-accessor-for-metadata.herokuapp.com'\n          }\n        \n    }\n\n    public searchTracks(searchQuery: string): Promise<any> {\n        return fetch(this.api_url + `/search/${searchQuery}`).then(response => response.json());\n    }\n\n    public fetchTrackMetadata(trackUri: string): Promise<any> {\n        return fetch(this.api_url + `/fetchTrackMetadata/${trackUri}`).then(response => response.json());\n    }\n\n    public fetchArtistMetadata(artistUri: string): Promise<any> {\n        return fetch(this.api_url + `/fetchArtistMetadata/${artistUri}`).then(response => response.json());\n    }\n}\n\nexport default SpotifyApiService;","import React from 'react'\nimport SpotifyApiService from '../SpotifyApiService/SpotifyApiService'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { SearchResultItem } from '../models/SearchResultItem';\nimport { AudioFeatures, getKeyAndMode } from '../models/AudioFeatures';\nimport blackLogo from '../static/black-logo.png'\nimport Slider from '@material-ui/core/Slider'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InfoIconOutlined from '@material-ui/icons/InfoOutlined';\nimport './Search.css'\nimport { Artist } from '../models/Artist';\n\ninterface SearchState {\n  searchResults: SearchResultItem[];\n  trackName: string;\n  artistName: string;\n  trackMetadata: AudioFeatures;\n  artistMetadata: Artist;\n  loading: boolean;\n}\n\nexport class Search extends React.Component<{}, SearchState> {\n\n  public searchQuery: string = '';\n  private spotifyApiService: SpotifyApiService = new SpotifyApiService();\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      trackName: '',\n      artistName: '',\n      trackMetadata: {} as AudioFeatures,\n      artistMetadata: {} as Artist,\n      loading: false\n    }\n  }\n\n  searchSubmit(): void {\n    this.setState({loading: true});\n    if (this.searchQuery)\n      this.spotifyApiService.searchTracks(this.searchQuery).then(data => {\n        this.setState({ searchResults: data.tracks.items, loading: false });\n      });\n  }\n\n  fetchTrackMetadata(songUri: string, trackName: string): void {\n    this.spotifyApiService.fetchTrackMetadata(songUri).then(data => {\n      this.setState(\n        {\n          trackMetadata: data,\n          trackName: trackName\n        });\n    })\n  }\n\n  fetchArtistMetadata(artistUri: string, artistName: string): void {\n    this.spotifyApiService.fetchArtistMetadata(artistUri).then(data => {\n      this.setState(\n        {\n          artistMetadata: data,\n          artistName: artistName\n        });\n    })\n  }\n\n  createSearchResultList(): JSX.Element {\n    if (this.state.searchResults.length === 0 && !this.state.loading) {\n      return <div key='-1'>No search results found.</div>\n    }\n    return (\n      <div>\n        {this.state.loading ? \n        <div>\n          <Spinner animation='border'/>\n          <div>\n            *note that the first search might take extra time while the Heroku dyno spins up.\n          </div>\n        </div> :\n        <div className='result-list'>\n          {this.state.searchResults.map((result: SearchResultItem) => this.createSearchResult(result))}\n        </div>}\n      </div>\n    )\n  }\n\n\n  createSearchResult(result: SearchResultItem): JSX.Element {\n    return (\n      <div key={result.uri}>\n        <Button variant='outline-secondary' onClick={() => {\n          this.fetchTrackMetadata(result.uri, result.name);\n          this.fetchArtistMetadata(result.artists[0].uri, result.artists[0].name);\n        }}>\n          <div className='result'>\n            <img className='album-art' src={result.album.images[0].url} alt={`Album art for ${result.album.name}`} />\n            <span>\n              <div>\n                {result.name}\n              </div>\n              <div>\n                {result.artists[0].name} • {result.album.name}\n              </div>\n            </span>\n          </div>\n        </Button>\n      </div>\n    );\n  }\n\n  displayTrackMetadata(): JSX.Element {\n    let metadata = this.state.trackMetadata;\n    if (!metadata?.duration_ms)\n      return <div>Please search for and select a song to view its metadata.</div>\n    let acousticnessTitle = 'A confidence measure from 0.0 to 1.0 of whether the track is acoustic.';\n    let danceabilityTitle = 'Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.';\n    let energyTitle = 'Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.';\n    let instrumentalnessTitle = 'Predicts whether a track contains no vocals. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.';\n    let livenessTitle = 'Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.';\n    let loudnessTitle = 'The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.';\n    let speechinessTitle = 'Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.';\n    let valenceTitle = 'A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track.';\n    return (\n      <div>\n        <h3>Audio features for <span className='name'>{this.state.trackName}</span>:</h3>\n        <h5>Key: {getKeyAndMode(metadata.key, metadata.mode)}</h5>\n        <h5>Tempo: {metadata.tempo}</h5>\n        <h5>Beats/measure: {metadata.time_signature}</h5>\n        <div className='value-sliders'>\n          <div className='reduced-column'>\n            <span className='attribute-title'>Acousticness </span>\n            <Tooltip title={acousticnessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.acousticness} max={1} />\n\n            <span className='attribute-title'>Danceability </span>\n            <Tooltip title={danceabilityTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.danceability} max={1} />\n\n            <span className='attribute-title'>Energy </span>\n            <Tooltip title={energyTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.energy} max={1} />\n\n            <span className='attribute-title'>Instrumentalness </span>\n            <Tooltip title={instrumentalnessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.instrumentalness} max={1} />\n          </div>\n\n          <div className='reduced-column'>\n            <span className='attribute-title'>Liveness </span>\n            <Tooltip title={livenessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.liveness} max={1} />\n\n            <span className='attribute-title'>Loudness </span>\n            <Tooltip title={loudnessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.loudness * -1} max={60} />\n\n            <span className='attribute-title'>Speechiness </span>\n            <Tooltip title={speechinessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.speechiness} max={1} />\n\n            <span className='attribute-title'>Valence </span>\n            <Tooltip title={valenceTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.valence} max={1} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  displayArtistMetadata(): JSX.Element {\n    let metadata = this.state.artistMetadata;\n    if (!metadata?.followers)\n      return <div>Please search for and select a song to view its artist's metadata.</div>\n    return (\n      <div>\n        <h3>Additional information on <span className='name'>{this.state.artistName}</span>:</h3>\n        <h5>Genres: {this.displayGenres(metadata.genres)}</h5>\n        <h5>Followers: {metadata.followers.total.toLocaleString()}</h5>\n        <h5>Popularity: {metadata.popularity}</h5>\n      </div>\n    );\n  }\n\n  displayGenres(genres: string[]): string {\n    if (!genres.length)\n      return 'No genre information is available for this artist.';\n    return genres.join(', ');\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <div className='input-prompt'>\n          Enter the name of the track to search for:\n        </div>\n        <Form className='input' inline>\n          <Form.Control\n            type=\"text\" onKeyPress={(event: any) => {\n              if (event.key === 'Enter') { \n                event.preventDefault();\n                this.searchSubmit();\n              }\n            }}\n            onChange={(value: any) =>\n              this.searchQuery = value.target.value\n            }\n          />\n          <Button className='submit' type=\"button\" variant=\"outline-success\" onClick={() => this.searchSubmit()}>\n            <img className='submit-img' src={blackLogo} alt='Submit' />\n          </Button>\n        </Form>\n        <div className='main-content'>\n          <div className='column'>\n            {this.createSearchResultList()}\n          </div>\n          <div className='column'>\n            {this.displayTrackMetadata()}\n            <hr/>\n            {this.displayArtistMetadata()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;","export interface AudioFeatures {\n    duration_ms: number;\n    key: number;\n    mode: number;\n    time_signature: number;\n    acousticness : number,\n    danceability : number,\n    energy : number,\n    instrumentalness : number,\n    liveness : number,\n    loudness : number,\n    speechiness : number,\n    valence : number,\n    tempo : number\n}\n\nexport function getKeyAndMode(key: number, mode: number): string {\n    return `${keyNumberToString(key)} ${modeNumberToString(mode)}`\n}\n\nfunction keyNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"C\";\n        case 1:\n            return \"C#/Db\"\n        case 2:\n            return \"D\"\n        case 3:\n            return \"D#/Eb\";\n        case 4:\n            return \"E\"\n        case 5:\n            return \"F\"\n        case 6:\n            return \"F#/Gb\";\n        case 7:\n            return \"G\"\n        case 8:\n            return \"G#/Ab\"\n        case 9:\n            return \"A\";\n        case 10:\n            return \"A#/Bb\"\n        case 11:\n            return \"B\"\n    }\n}\n\nfunction modeNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"minor\";\n        case 1:\n            return \"major\"\n    }\n}\n","import React from 'react'\nimport blackLogo from '../static/black-logo.png'\nimport './Homepage.css'\n\nexport class Homepage extends React.Component {\n\n  getReadmeLink(): JSX.Element {\n    let readmeLink = 'https://github.com/deantorkelson/spotify-accessor-for-metadata/blob/master/frontend/README.md';\n    return <a className='readme' href={readmeLink}>readme</a>\n  }\n\n  getGithubIssuesLink(): JSX.Element {\n    let githubIssuesLink = 'https://github.com/deantorkelson/spotify-accessor-for-metadata/issues';\n    return <a className='readme' href={githubIssuesLink}>Github Issues</a>\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <div>\n          <h1><br /><br />Welcome to the Spotify Accessor for Metadata!</h1>\n          <div className='main-text'>\n            <h3>\n              This website was designed to allow you to do more with the metadata stored by Spotify. It's still in development, so please refer to the {this.getReadmeLink()} or {this.getGithubIssuesLink()} to see what's in store!\n            </h3>\n          </div>\n        </div>\n        <img className='main-logo' src={blackLogo} alt='Spotify Accessor for Metadata logo' />\n      </div>\n    )\n  }\n}\n\nexport default Homepage;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport greenLogo from '../static/green-logo.png'\nimport './Navbar.css'\n\n\nexport class Navbar extends React.Component<{}, {}> {\n\n  render() {\n    return (\n      <div className='navbar'>\n        <Link className='logo' to='/'>\n          <img className='logo-img' src={greenLogo} alt={'Logo for S.A.M.'}/>\n          <h1 className='title'>Spotify Accessor for Metadata</h1>\n        </Link>\n        <ul className='links'>\n          <li>\n            <Link to='/'>HOME</Link>\n          </li>\n          <li>\n            <Link to='/search'>SEARCH</Link>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Search from './Search/Search'\nimport Homepage from './Homepage/Homepage'\nimport './App.css';\nimport Navbar from './Navbar/Navbar';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar/>\n        <Switch>\n          <Route path='/search' component={Search}/>\n          <Route path='/' component={Homepage}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
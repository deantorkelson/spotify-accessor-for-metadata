{"version":3,"sources":["constants.ts","components/Navbar/Navbar.tsx","pages/Homepage/Homepage.tsx","components/TextInput/TextInput.tsx","components/ResultList/ResultList.tsx","helpers/helpers.ts","utils/api/SpotifyApiService/SpotifyApiService.tsx","static/additionalStrings.ts","pages/PlaylistCompare/PlaylistCompare.tsx","pages/Search/SearchPresenter.tsx","models/api/TrackMetadataResponse.ts","pages/Search/SearchContainer.tsx","pages/Tools/ToolsPresenter.tsx","pages/Tools/ToolsContainer.tsx","utils/helpers.ts","App.tsx","serviceWorker.ts","index.tsx","static/black-logo.png","static/green-logo.png"],"names":["ENVIRONMENTS","ROUTES","Navbar","className","exact","to","src","greenLogo","alt","Homepage","BASE_URL","packageJson","version","readmeLink","href","getReadmeLink","githubIssuesLink","getGithubIssuesLink","blackLogo","TextInput","text","Form","inline","Control","placeholder","this","props","type","onKeyPress","event","key","preventDefault","submit","onChange","value","target","Button","variant","onClick","React","Component","createSearchResultList","loading","searchResults","formatter","Spinner","animation","length","map","result","index","HttpMethod","parseUriFromLink","link","playlistId","split","pop","SpotifyApiService","api_url","process","DEV","searchQuery","get","playlistUri","trackUri","artistUri","playlistUris","body","JSON","stringify","uris","post","endpoint","fetch","then","response","json","options","method","POST","headers","en","search","tooltips","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","valence","playlistCompare","tooltip","he","require","PlaylistCompare","useState","setSearchResults","searchLoading","setSearchLoading","selectedPlaylists","setSelectedPlaylists","compareLoading","setCompareLoading","modalIsOpen","setModalIsOpen","modalData","setModalData","spotifyApiService","addPlaylist","playlist","playlists","Set","add","compareSubmit","additional","forEach","push","uri","concat","comparePlaylists","data","finally","closeModal","playlistText","name","owner","display_name","description","decode","substring","tracks","total","displaySelectedPlaylist","images","url","delete","size","removePlaylist","IndeterminateCheckBox","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","query","includes","isPlaylistLink","playlistDetails","searchPlaylists","items","AddBox","playlistItems","renderSelectedPlaylists","isOpen","onRequestClose","style","content","margin","width","names","artists","artist","songs","song","SearchPresenter","artistName","artistMetadata","fetchMetadata","searchSubmit","trackName","trackMetadata","audioFeatureSliderData","title","audioFeatureSlider","InfoOutlined","fontSize","Slider","disabled","track","max","displayGenres","genres","join","album","Visibility","mode","keyNumberToString","modeNumberToString","tempo","time_signature","slice","sliderData","displayTrackMetadata","followers","toLocaleString","popularity","SearchContainer","setArtistName","setArtistMetadata","setLoading","setTrackName","setTrackMetadata","fetchTrackMetadata","fetchArtistMetadata","searchTracks","ToolsPresenter","rubinQuote","bookQuote","scaleDegree","tonality","randomEnabled","setRandomEnabled","shouldUseFullScale","setShouldUseFullScale","quote","author","Checkbox","color","MINOR_PENTATONIC_DEGREES","RubinContainer","setRubinQuote","setBookQuote","setScaleDegree","setTonality","useEffect","intervalId","setInterval","Math","floor","random","clearInterval","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.fb9251f5.chunk.js","sourcesContent":["export enum ENVIRONMENTS {\n  DEV = \"development\",\n  PROD = \"production\",\n}\n\nexport const DEAN_URI = \"spotify/playlist/0ndBAQglIRXPRdh2SDXfcD\";\n\nexport const BASE_NAME = \"/spotify-accessor-for-metadata\";\n\nexport const ROUTES = {\n  HOME: \"/\",\n  SEARCH: \"/search\",\n  COMPARE: \"/compare\",\n  TOOLS: \"/tools\",\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport { ROUTES } from \"src/constants\";\nimport greenLogo from \"src/static/green-logo.png\";\nimport \"./Navbar.css\";\n\nexport const Navbar = () => {\n  return (\n    <div className=\"navbar\">\n      <NavLink exact className=\"logo\" to={ROUTES.HOME}>\n        <img className=\"logo-img\" src={greenLogo} alt={\"Logo for S.A.M.\"} />\n        <h1 className=\"title\">Spotify Accessor for Metadata</h1>\n      </NavLink>\n      <ul className=\"links\">\n        <li>\n          <NavLink exact to={ROUTES.HOME}>\n            HOME\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.SEARCH}>SEARCH</NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.COMPARE}>COMPARE PLAYLISTS</NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.TOOLS}>TOOLS</NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nimport blackLogo from \"src/static/black-logo.png\";\nimport packageJson from \"../../../package.json\";\nimport \"./Homepage.css\";\n\nconst Homepage = () => {\n  const BASE_URL =\n    \"https://github.com/deantorkelson/spotify-accessor-for-metadata\";\n\n  const getReadmeLink = () => {\n    let readmeLink = `${BASE_URL}/blob/master/README.md`;\n    return (\n      <a className=\"readme\" href={readmeLink}>\n        readme\n      </a>\n    );\n  };\n\n  const getGithubIssuesLink = () => {\n    let githubIssuesLink = `${BASE_URL}/issues`;\n    return (\n      <a className=\"readme\" href={githubIssuesLink}>\n        Github Issues\n      </a>\n    );\n  };\n\n  return (\n    <div className=\"page\">\n      <div>\n        <h1>\n          <br />\n          <br />\n          Welcome to the Spotify Accessor for Metadata v{packageJson.version}!\n        </h1>\n        <div className=\"main-text\">\n          <h3>\n            This website was designed to allow you to do more with the metadata\n            stored by Spotify. It's still in development, so please refer to the{\" \"}\n            {getReadmeLink()} or {getGithubIssuesLink()} to see what's in store!\n          </h3>\n        </div>\n      </div>\n      <img\n        className=\"main-logo\"\n        src={blackLogo}\n        alt=\"Spotify Accessor for Metadata logo\"\n      />\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport blackLogo from \"src/static/black-logo.png\";\nimport \"./TextInput.css\";\n\ninterface TextInputProps {\n  placeholder: string;\n  submit: any;\n}\n\nexport class TextInput extends React.Component<TextInputProps, {}> {\n  private text = \"\";\n\n  render() {\n    return (\n      <Form className=\"input\" inline>\n        <Form.Control\n          className=\"text-input\"\n          placeholder={this.props.placeholder}\n          type=\"text\"\n          onKeyPress={(event: any) => {\n            if (event.key === \"Enter\") {\n              event.preventDefault();\n              this.props.submit();\n            }\n          }}\n          onChange={(value: any) => (this.text = value.target.value)}\n        />\n        <Button\n          className=\"submit\"\n          type=\"button\"\n          variant=\"outline-success\"\n          onClick={() => this.props.submit(this.text)}\n        >\n          <img className=\"submit-img\" src={blackLogo} alt=\"Submit\" />\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default TextInput;\n","import Spinner from \"react-bootstrap/Spinner\";\nimport React from \"react\";\nimport { Nullable } from \"src/types/types\";\n\nexport function createSearchResultList<T>(\n  loading: boolean,\n  searchResults: Nullable<T[]>,\n  formatter: (result: T, ...args: any[]) => JSX.Element,\n) {\n  if (loading) {\n    return (\n      <div>\n        <Spinner animation=\"border\" />\n        <div>\n          *note that the first search might take extra time while the Heroku\n          dyno spins up.\n        </div>\n      </div>\n    );\n  }\n  if (searchResults) {\n    if (!searchResults.length) {\n      return <div key=\"-1\">No search results found.</div>;\n    }\n    return (\n      <div className=\"result-list\">\n        {searchResults.map((result: T, index) => formatter(result, index))}\n      </div>\n    );\n  }\n  return null;\n}\n","const spotifyUriRegex =\n  /(spotify[/:]playlist[/:]([a-zA-Z0-9]+)[,\\s]+)+(spotify[/:]playlist[/:]([a-zA-Z0-9]+))/;\n\nexport const isUriList = (str: string): boolean => spotifyUriRegex.test(str);\n\nexport const parseUriFromLink = (link: string): string => {\n  const withoutQueryParams = link.split(\"?\")[0];\n  const playlistId = withoutQueryParams.split(\"/\").pop();\n  return `spotify:playlist:${playlistId}`;\n};\n\nexport const parseUriListFromLinks = (query: string): string[] => {\n  const links = query.split(\",\");\n  return links.map((link) => parseUriFromLink(link));\n};\n\nexport const isPlaylistLink = (query: string) => {\n  return query.includes(\"open.spotify.com/playlist\");\n};\n","import { ENVIRONMENTS } from \"src/constants\";\nimport { ArtistMetadataResponse } from \"src/models/api/ArtistMetadataResponse\";\nimport { SearchTracksResponse } from \"src/models/api/SearchTracksResponse\";\nimport { TrackMetadataResponse } from \"src/models/api/TrackMetadataResponse\";\nimport { SearchPlaylistsResponse } from \"src/models/api/SearchPlaylistsResponse\";\nimport { ComparePlaylistsResponse } from \"src/models/api/ComparePlaylistsResponse\";\nimport { Playlist } from \"src/models/Playlist\";\nimport { BookQuoteResponse } from \"src/models/api/BookQuoteResponse\";\nimport { RubinResponse } from \"src/models/api/RubinResponse\";\n\nenum HttpMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n}\n\nexport class SpotifyApiService {\n  readonly api_url: string;\n\n  constructor() {\n    if (process.env.NODE_ENV === ENVIRONMENTS.DEV) {\n      this.api_url = \"http://0.0.0.0:5001\";\n    } else {\n      this.api_url = \"https://sam-backend-d60bd9ccf7b8.herokuapp.com\";\n    }\n  }\n\n  public searchTracks(searchQuery: string): Promise<SearchTracksResponse> {\n    return this.get(this.api_url + `/search/tracks?q=${searchQuery}`);\n  }\n\n  public searchPlaylists(\n    searchQuery: string,\n  ): Promise<SearchPlaylistsResponse> {\n    return this.get(this.api_url + `/search/playlists?q=${searchQuery}`);\n  }\n\n  public playlistDetails(playlistUri: string): Promise<Playlist> {\n    return this.get(this.api_url + `/playlist/${playlistUri}`);\n  }\n\n  public fetchTrackMetadata(trackUri: string): Promise<TrackMetadataResponse> {\n    return this.get(this.api_url + `/track/${trackUri}`);\n  }\n\n  public fetchArtistMetadata(\n    artistUri: string,\n  ): Promise<ArtistMetadataResponse> {\n    return this.get(this.api_url + `/artist/${artistUri}`);\n  }\n\n  public comparePlaylists(\n    playlistUris: string[],\n  ): Promise<ComparePlaylistsResponse> {\n    const body = JSON.stringify({\n      uris: playlistUris,\n    });\n    return this.post(this.api_url + \"/playlists/compare\", body);\n  }\n\n  public rubinQuote(): Promise<RubinResponse> {\n    return this.get(this.api_url + `/random/rubin`);\n  }\n\n  public bookQuote(): Promise<BookQuoteResponse> {\n    return this.get(this.api_url + `/random/book_quote`);\n  }\n\n  public get(endpoint: string): Promise<any> {\n    return fetch(endpoint).then((response: any) => response.json());\n  }\n\n  public post(endpoint: string, body: string): Promise<any> {\n    let options = {\n      method: HttpMethod.POST,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body,\n    };\n    return fetch(endpoint, options).then((response: any) => response.json());\n  }\n}\n\nexport default SpotifyApiService;\n","export const en = {\n  search: {\n    tooltips: {\n      acousticness:\n        \"A confidence measure from 0.0 to 1.0 of whether the track is acoustic.\",\n      danceability:\n        \"Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\",\n      energy:\n        \"Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.\",\n      instrumentalness:\n        'Predicts whether a track contains no vocals. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.',\n      liveness:\n        \"Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.\",\n      loudness:\n        \"The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.\",\n      speechiness:\n        \"Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.\",\n      valence:\n        \"A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track.\",\n    },\n    placeholder: \"Enter the name of a song or artist...\",\n  },\n  playlistCompare: {\n    placeholder: \"Search for a playlist...\",\n    tooltip:\n      'This would look like \"https://open.spotify.com/playlist/5YfQFj40rrMiUp5hutvfH6\"',\n  },\n};\n\nexport default en;\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Modal from \"react-modal\";\nimport { AddBox, IndeterminateCheckBox } from \"@material-ui/icons\";\n\nimport TextInput from \"src/components/TextInput/TextInput\";\nimport { DEAN_URI } from \"src/constants\";\nimport { createSearchResultList } from \"src/components/ResultList/ResultList\";\nimport { isPlaylistLink, parseUriFromLink } from \"src/helpers/helpers\";\nimport { ComparePlaylistsResponse } from \"src/models/api/ComparePlaylistsResponse\";\nimport { Playlist } from \"src/models/Playlist\";\nimport SpotifyApiService from \"src/utils/api/SpotifyApiService/SpotifyApiService\";\nimport en from \"src/static/additionalStrings\";\nimport { Nullable } from \"src/types/types\";\nimport \"./PlaylistCompare.css\";\nimport \"../ResultList.css\";\n\nlet he = require(\"he\");\n\nexport const PlaylistCompare = () => {\n  const [searchResults, setSearchResults] =\n    useState<Nullable<Playlist[]>>(null);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [selectedPlaylists, setSelectedPlaylists] =\n    useState<Nullable<Set<Playlist>>>(null);\n  const [compareLoading, setCompareLoading] = useState(false);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalData, setModalData] =\n    useState<Nullable<ComparePlaylistsResponse>>(null);\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const addPlaylist = (playlist: Playlist) => {\n    let playlists = new Set(selectedPlaylists);\n    playlists.add(playlist);\n    setSelectedPlaylists(playlists);\n  };\n\n  const removePlaylist = (playlist: Playlist) => {\n    let playlists = new Set(selectedPlaylists);\n    playlists.delete(playlist);\n    setSelectedPlaylists(playlists.size ? playlists : null);\n  };\n\n  const searchSubmit = (query: string) => {\n    if (query) {\n      // if words, search for words\n      // if list of links, parse out the URIs and send to the backend\n      if (isPlaylistLink(query)) {\n        setSearchLoading(true);\n        const playlistUri = parseUriFromLink(query);\n        spotifyApiService.playlistDetails(playlistUri).then((data) => {\n          addPlaylist(data);\n        });\n        setSearchLoading(false);\n      } else {\n        setSearchLoading(true);\n        spotifyApiService.searchPlaylists(query).then((data) => {\n          setSearchResults(data.playlists.items);\n          setSearchLoading(false);\n        });\n      }\n    }\n  };\n\n  const compareSubmit = (\n    playlists: Set<Playlist>,\n    additional: string[] = [],\n  ) => {\n    setCompareLoading(true);\n    let playlistUris = additional;\n    playlists.forEach((playlist: Playlist) => {\n      playlistUris.push(playlist.uri);\n    });\n    playlistUris.concat(additional);\n    spotifyApiService\n      .comparePlaylists(playlistUris)\n      .then((data) => {\n        setModalIsOpen(true);\n        setModalData(data);\n      })\n      .finally(() => {\n        setCompareLoading(false);\n      });\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  };\n\n  const commonPlaylistData = () => {\n    if (!modalData) return null;\n\n    return (\n      <>\n        <Button variant={\"outline-secondary\"} onClick={closeModal}>\n          Close\n        </Button>\n        <div className=\"modal-body\">\n          <div className=\"column-30\">\n            <div className=\"header\">Comparing these playlists:</div>\n            {modalData.names.map((playlist: string) => (\n              <div>{playlist}</div>\n            ))}\n          </div>\n          <div className=\"column\">\n            <div className=\"header\">Common artists:</div>\n            <ul>\n              {modalData.artists.map((artist: string) => (\n                <div className=\"modal-li\">{artist}</div>\n              ))}\n            </ul>\n          </div>\n          <div className=\"column\">\n            <div className=\"header\">Common songs:</div>\n            <ul>\n              {modalData.songs.map((song: string) => (\n                <div className=\"modal-li\">{song}</div>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  const playlistText = (playlist: Playlist) => (\n    <div className=\"result-text\">\n      <div>\n        <b>{playlist.name}</b> by {playlist.owner.display_name}\n      </div>\n      {playlist.description && (\n        <div>\n          {he.decode(playlist.description).length > 140\n            ? he.decode(playlist.description).substring(0, 140) + \"...\"\n            : he.decode(playlist.description)}\n        </div>\n      )}\n      <div>{playlist.tracks.total} songs</div>\n    </div>\n  );\n\n  const displaySearchResult = (result: Playlist) => (\n    <div key={result.uri}>\n      <div className=\"result\">\n        <div className=\"image-container\">\n          <img\n            className=\"cover-img\"\n            src={result.images[0].url}\n            alt={`Cover for ${result.name}`}\n          />\n          <Button\n            className=\"result-button\"\n            variant=\"link\"\n            onClick={() => addPlaylist(result)}\n          >\n            <AddBox />\n          </Button>\n        </div>\n        {playlistText(result)}\n      </div>\n    </div>\n  );\n\n  const displaySelectedPlaylist = (result: Playlist) => (\n    <div key={result.uri}>\n      <div className=\"result\">\n        <div className=\"image-container\">\n          <img\n            className=\"cover-img\"\n            src={result.images[0].url}\n            alt={`Cover for ${result.name}`}\n          />\n          <Button\n            className=\"result-button\"\n            variant=\"link\"\n            onClick={() => removePlaylist(result)}\n          >\n            <IndeterminateCheckBox />\n          </Button>\n        </div>\n        {playlistText(result)}\n      </div>\n    </div>\n  );\n\n  const renderSelectedPlaylists = () => {\n    if (!selectedPlaylists) return null;\n\n    let playlistItems: JSX.Element[] = [];\n    selectedPlaylists.forEach((playlist: Playlist) => {\n      playlistItems.push(displaySelectedPlaylist(playlist));\n    });\n    return playlistItems;\n  };\n\n  const displaySelectedPlaylistsColumn = () => {\n    if (!selectedPlaylists) return null;\n\n    return (\n      <>\n        <div className=\"header\">Comparing these playlists:</div>\n        {renderSelectedPlaylists()}\n        {compareLoading ? (\n          <Spinner animation=\"border\" />\n        ) : (\n          <div className=\"buttons\">\n            <Button\n              className=\"submit\"\n              type=\"button\"\n              variant=\"success\"\n              onClick={() => compareSubmit(selectedPlaylists)}\n            >\n              Submit\n            </Button>\n            <Button\n              className=\"submit\"\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={() => setSelectedPlaylists(null)}\n            >\n              Clear\n            </Button>\n            <Button\n              className=\"submit\"\n              type=\"button\"\n              variant=\"danger\"\n              onClick={() => compareSubmit(selectedPlaylists, [DEAN_URI])}\n            >\n              Compare to Dean's music\n            </Button>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  const renderTooltip = (props: any) => (\n    <Tooltip {...props}>{en.playlistCompare.tooltip}</Tooltip>\n  );\n\n  return (\n    <div className=\"page\">\n      <div className=\"header\">\n        Enter the name of the playlist to search for, <br />\n        or a&nbsp;\n        <OverlayTrigger\n          placement=\"right\"\n          delay={{ show: 100, hide: 400 }}\n          overlay={renderTooltip}\n        >\n          <span className=\"uri-tooltip\">link to a playlist:</span>\n        </OverlayTrigger>\n      </div>\n      <TextInput\n        placeholder={en.playlistCompare.placeholder}\n        submit={searchSubmit}\n      />\n      <div className=\"main-content\">\n        <div className=\"column\">\n          {createSearchResultList<Playlist>(\n            searchLoading,\n            searchResults,\n            displaySearchResult,\n          )}\n        </div>\n        <div className=\"column\">{displaySelectedPlaylistsColumn()}</div>\n        <div>\n          <Modal\n            isOpen={modalIsOpen}\n            onRequestClose={closeModal}\n            style={{\n              content: {\n                margin: \"auto\",\n                width: \"75%\",\n              },\n            }}\n          >\n            {commonPlaylistData()}\n          </Modal>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlaylistCompare;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { InfoOutlined, Visibility } from \"@material-ui/icons\";\n\nimport TextInput from \"src/components/TextInput/TextInput\";\nimport { ArtistMetadataResponse } from \"src/models/api/ArtistMetadataResponse\";\nimport {\n  TrackMetadataResponse,\n  getKeyAndMode,\n} from \"src/models/api/TrackMetadataResponse\";\nimport { Track } from \"src/models/Track\";\nimport { AudioFeatureSliderData, Nullable } from \"src/types/types\";\nimport en from \"src/static/additionalStrings\";\nimport \"./Search.css\";\nimport \"../ResultList.css\";\nimport { createSearchResultList } from \"src/components/ResultList/ResultList\";\n\ninterface Props {\n  artistName: string;\n  artistMetadata: Nullable<ArtistMetadataResponse>;\n  fetchMetadata: (\n    trackUri: string,\n    trackName: string,\n    artistUri: string,\n    artistName: string,\n  ) => void;\n  loading: boolean;\n  searchResults: Nullable<Track[]>;\n  searchSubmit: (query: string) => void;\n  trackName: string;\n  trackMetadata: Nullable<TrackMetadataResponse>;\n}\n\nexport const SearchPresenter = (props: Props) => {\n  const {\n    artistName,\n    artistMetadata,\n    fetchMetadata,\n    loading,\n    searchResults,\n    searchSubmit,\n    trackName,\n    trackMetadata,\n  } = props;\n\n  const searchResult = (result: Track) => (\n    <div key={result.uri}>\n      <div className=\"result\">\n        <div className=\"image-container\">\n          <img\n            className=\"cover-img\"\n            src={result.album.images[0].url}\n            alt={`Cover for ${result.album.name}`}\n          />\n          <Button\n            className=\"result-button\"\n            variant=\"link\"\n            onClick={() =>\n              fetchMetadata(\n                result.uri,\n                result.name,\n                result.artists[0].uri,\n                result.artists[0].name,\n              )\n            }\n          >\n            <Visibility className=\"select-logo-img\" />\n          </Button>\n        </div>\n        <section className=\"result-text\">\n          <b>{result.name}</b>\n          <div>\n            {result.artists[0].name} • {result.album.name}\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n\n  const audioFeatureSliderData = (\n    trackMetadata: TrackMetadataResponse,\n  ): AudioFeatureSliderData[] => [\n    {\n      title: \"Acousticness\",\n      tooltip: en.search.tooltips.acousticness,\n      value: trackMetadata.acousticness,\n    },\n    {\n      title: \"Danceability\",\n      tooltip: en.search.tooltips.danceability,\n      value: trackMetadata.danceability,\n    },\n    {\n      title: \"Energy\",\n      tooltip: en.search.tooltips.energy,\n      value: trackMetadata.energy,\n    },\n    {\n      title: \"Instrumentalness\",\n      tooltip: en.search.tooltips.instrumentalness,\n      value: trackMetadata.instrumentalness,\n    },\n    {\n      title: \"Liveness\",\n      tooltip: en.search.tooltips.liveness,\n      value: trackMetadata.liveness,\n    },\n    {\n      title: \"Loudness\",\n      tooltip: en.search.tooltips.loudness,\n      value: trackMetadata.loudness / -60,\n    },\n    {\n      title: \"Speechiness\",\n      tooltip: en.search.tooltips.speechiness,\n      value: trackMetadata.acousticness,\n    },\n    {\n      title: \"Valence\",\n      tooltip: en.search.tooltips.valence,\n      value: trackMetadata.valence,\n    },\n  ];\n\n  const audioFeatureSlider = (\n    title: string,\n    tooltip: string,\n    value: number,\n  ) => (\n    <>\n      <span className=\"attribute-title\">{title}</span>\n      <Tooltip title={tooltip}>\n        <InfoOutlined className={\"info-icon\"} fontSize=\"small\" />\n      </Tooltip>\n      <Slider disabled track={false} value={value} max={1} />\n    </>\n  );\n\n  const displayTrackMetadata = () => {\n    const columnLength = 4;\n    return trackMetadata ? (\n      <div>\n        <h3>\n          Audio features for <span className=\"name\">{trackName}</span>:\n        </h3>\n        <h5>Key: {getKeyAndMode(trackMetadata.key, trackMetadata.mode)}</h5>\n        <h5>Tempo: {trackMetadata.tempo}</h5>\n        <h5>Beats/measure: {trackMetadata.time_signature}</h5>\n        <div className=\"value-sliders\">\n          <div className=\"reduced-column\">\n            {audioFeatureSliderData(trackMetadata)\n              .slice(0, columnLength)\n              .map((sliderData) =>\n                audioFeatureSlider(\n                  sliderData.title,\n                  sliderData.tooltip,\n                  sliderData.value,\n                ),\n              )}\n          </div>\n          <div className=\"reduced-column\">\n            {audioFeatureSliderData(trackMetadata)\n              .slice(columnLength)\n              .map((sliderData) =>\n                audioFeatureSlider(\n                  sliderData.title,\n                  sliderData.tooltip,\n                  sliderData.value,\n                ),\n              )}\n          </div>\n        </div>\n      </div>\n    ) : null;\n  };\n\n  const displayArtistMetadata = () =>\n    artistMetadata ? (\n      <div>\n        <h3>\n          Additional information on <span className=\"name\">{artistName}</span>:\n        </h3>\n        <h5>Genres: {displayGenres(artistMetadata.genres)}</h5>\n        <h5>Followers: {artistMetadata.followers.total.toLocaleString()}</h5>\n        <h5>Popularity: {artistMetadata.popularity}</h5>\n      </div>\n    ) : null;\n\n  const displayGenres = (genres: string[]) =>\n    !genres.length\n      ? \"No genre information is available for this artist.\"\n      : genres.join(\", \");\n\n  return (\n    <div className=\"page\">\n      <div className=\"header\">Enter the name of the track to search for:</div>\n      <TextInput placeholder={en.search.placeholder} submit={searchSubmit} />\n      <div className=\"main-content\">\n        <div className=\"column\">\n          {createSearchResultList<Track>(loading, searchResults, searchResult)}\n        </div>\n        <div className=\"column\">\n          {displayTrackMetadata()}\n          {artistMetadata && trackMetadata ? <hr /> : null}\n          {displayArtistMetadata()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchPresenter;\n","export interface TrackMetadataResponse {\n  duration_ms: number;\n  key: number;\n  mode: number;\n  time_signature: number;\n  acousticness: number;\n  danceability: number;\n  energy: number;\n  instrumentalness: number;\n  liveness: number;\n  loudness: number;\n  speechiness: number;\n  valence: number;\n  tempo: number;\n}\n\nexport function getKeyAndMode(key: number, mode: number): string {\n  return `${keyNumberToString(key)} ${modeNumberToString(mode)}`;\n}\n\nfunction keyNumberToString(key: number) {\n  switch (key) {\n    case 0:\n      return \"C\";\n    case 1:\n      return \"C#/Db\";\n    case 2:\n      return \"D\";\n    case 3:\n      return \"D#/Eb\";\n    case 4:\n      return \"E\";\n    case 5:\n      return \"F\";\n    case 6:\n      return \"F#/Gb\";\n    case 7:\n      return \"G\";\n    case 8:\n      return \"G#/Ab\";\n    case 9:\n      return \"A\";\n    case 10:\n      return \"A#/Bb\";\n    case 11:\n      return \"B\";\n  }\n}\n\nfunction modeNumberToString(key: number) {\n  switch (key) {\n    case 0:\n      return \"minor\";\n    case 1:\n      return \"major\";\n  }\n}\n","import React, { useState } from \"react\";\n\nimport { ArtistMetadataResponse } from \"src/models/api/ArtistMetadataResponse\";\nimport { TrackMetadataResponse } from \"src/models/api/TrackMetadataResponse\";\nimport { Track } from \"src/models/Track\";\nimport SearchPresenter from \"src/pages/Search/SearchPresenter\";\nimport SpotifyApiService from \"src/utils/api/SpotifyApiService/SpotifyApiService\";\nimport \"./Search.css\";\nimport \"../ResultList.css\";\nimport { Nullable } from \"src/types/types\";\n\nexport const SearchContainer = () => {\n  const [artistName, setArtistName] = useState(\"\");\n  const [artistMetadata, setArtistMetadata] =\n    useState<Nullable<ArtistMetadataResponse>>(null);\n  const [searchResults, setSearchResults] = useState<Nullable<Track[]>>(null);\n  const [loading, setLoading] = useState(false);\n  const [trackName, setTrackName] = useState(\"\");\n  const [trackMetadata, setTrackMetadata] =\n    useState<Nullable<TrackMetadataResponse>>(null);\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const searchSubmit = (query: string) => {\n    if (!query) {\n      return;\n    }\n    setLoading(true);\n    spotifyApiService.searchTracks(query).then((data) => {\n      setSearchResults(data.tracks.items);\n      setLoading(false);\n    });\n  };\n\n  const fetchMetadata = (\n    trackUri: string,\n    trackName: string,\n    artistUri: string,\n    artistName: string,\n  ) => {\n    fetchTrackMetadata(trackUri, trackName);\n    fetchArtistMetadata(artistUri, artistName);\n  };\n\n  const fetchTrackMetadata = (trackUri: string, trackName: string) => {\n    spotifyApiService.fetchTrackMetadata(trackUri).then((data) => {\n      setTrackMetadata(data);\n      setTrackName(trackName);\n    });\n  };\n\n  const fetchArtistMetadata = (artistUri: string, artistName: string) => {\n    spotifyApiService.fetchArtistMetadata(artistUri).then((data) => {\n      setArtistMetadata(data);\n      setArtistName(artistName);\n    });\n  };\n\n  return (\n    <SearchPresenter\n      artistName={artistName}\n      artistMetadata={artistMetadata}\n      fetchMetadata={fetchMetadata}\n      loading={loading}\n      searchResults={searchResults}\n      searchSubmit={searchSubmit}\n      trackName={trackName}\n      trackMetadata={trackMetadata}\n    />\n  );\n};\n\nexport default SearchContainer;\n","import React from \"react\";\nimport { Button, Checkbox } from \"@material-ui/core\";\n\nimport { BookQuoteResponse } from \"src/models/api/BookQuoteResponse\";\nimport \"./Tools.css\";\n\ninterface Props {\n  rubinQuote: string;\n  bookQuote: BookQuoteResponse;\n  scaleDegree: number;\n  tonality: string;\n  randomEnabled: boolean;\n  setRandomEnabled: (value: boolean) => void;\n  shouldUseFullScale: boolean;\n  setShouldUseFullScale: (value: boolean) => void;\n}\n\nexport const ToolsPresenter = (props: Props) => {\n  const {\n    rubinQuote,\n    bookQuote,\n    scaleDegree,\n    tonality,\n    randomEnabled,\n    setRandomEnabled,\n    shouldUseFullScale,\n    setShouldUseFullScale,\n  } = props;\n\n  return (\n    <div className=\"page\">\n      <h1 className=\"header\">Let the hands of fate guide you</h1>\n      <div>\n        Rick Rubin keeps a library of books in his recording studio. If you're\n        stuck, grab a book and find a random quote to inspire you. Rubin also\n        said,\n        <br />\n        <i>{rubinQuote}</i>\n        <br />\n        <br />\n        May this quote help you resolve your creative conundrum:\n        <br />\"{bookQuote.quote}\" -{\" \"}\n        <span>\n          <i>{bookQuote.author}</i>\n        </span>\n        <hr />\n        <h1 className=\"header\">Music tools</h1>\n        <p>\n          A small set of tools that I use for music practice. I use these random\n          values for different freboard/scale/mode exercises, like \"Play the\n          pentatonic minor scale in the given key starting on the given scale\n          degree\"\n        </p>\n        <div>\n          <Checkbox\n            onClick={(event) => {\n              setRandomEnabled(!randomEnabled);\n            }}\n            value={randomEnabled}\n            color=\"primary\"\n          />\n          Enable random values?\n        </div>\n        <div>\n          <Checkbox\n            onClick={(event) => {\n              setShouldUseFullScale(!shouldUseFullScale);\n            }}\n            value={shouldUseFullScale}\n            color=\"primary\"\n          />\n          Enable full scale? (default is pentatonic)\n        </div>\n        <div className=\"main-content\">\n          <div className=\"column\">\n            <div></div>\n            <h4>Random Key</h4>\n            <div className=\"random-value\">{tonality}</div>\n          </div>\n          <div className=\"column\">\n            <div></div>\n            <h4>Random Scale Degree</h4>\n            <div className=\"random-value\">{scaleDegree}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ToolsPresenter;\n","import React, { useState, useEffect } from \"react\";\n\nimport { BookQuoteResponse } from \"src/models/api/BookQuoteResponse\";\nimport ToolsPresenter from \"src/pages/Tools/ToolsPresenter\";\nimport SpotifyApiService from \"src/utils/api/SpotifyApiService/SpotifyApiService\";\nimport { keyNumberToString } from \"../../utils/helpers\";\n\nconst MINOR_PENTATONIC_DEGREES = [1, 3, 4, 5, 7];\n\nexport const RubinContainer = () => {\n  const spotifyApiService = new SpotifyApiService();\n\n  const [rubinQuote, setRubinQuote] = useState(\"\");\n  const [bookQuote, setBookQuote] = useState({} as BookQuoteResponse);\n  const [scaleDegree, setScaleDegree] = useState(1);\n  const [tonality, setTonality] = useState(\"E\");\n  const [randomEnabled, setRandomEnabled] = useState(false);\n  const [shouldUseFullScale, setShouldUseFullScale] = useState(false);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (randomEnabled) {\n        setTonality(keyNumberToString(Math.floor(Math.random() * 11)));\n        if (shouldUseFullScale) {\n          setScaleDegree(Math.floor(Math.random() * 7) + 1);\n        } else {\n          setScaleDegree(\n            MINOR_PENTATONIC_DEGREES[Math.floor(Math.random() * 5)]\n          );\n        }\n      }\n    }, 2000);\n\n    return () => clearInterval(intervalId);\n  }, [randomEnabled, shouldUseFullScale]);\n\n  useEffect(() => {\n    spotifyApiService.rubinQuote().then((data) => {\n      setRubinQuote(data.quote);\n    });\n    spotifyApiService.bookQuote().then((data) => {\n      setBookQuote(data);\n    });\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <ToolsPresenter\n      bookQuote={bookQuote}\n      rubinQuote={rubinQuote}\n      scaleDegree={scaleDegree}\n      tonality={tonality}\n      randomEnabled={randomEnabled}\n      setRandomEnabled={setRandomEnabled}\n      shouldUseFullScale={shouldUseFullScale}\n      setShouldUseFullScale={setShouldUseFullScale}\n    />\n  );\n};\n\nexport default RubinContainer;\n","export function keyNumberToString(key: number): string {\n  switch (key) {\n    case 0:\n      return \"C\";\n    case 1:\n      return \"C#/Db\";\n    case 2:\n      return \"D\";\n    case 3:\n      return \"D#/Eb\";\n    case 4:\n      return \"E\";\n    case 5:\n      return \"F\";\n    case 6:\n      return \"F#/Gb\";\n    case 7:\n      return \"G\";\n    case 8:\n      return \"G#/Ab\";\n    case 9:\n      return \"A\";\n    case 10:\n      return \"A#/Bb\";\n    case 11:\n      return \"B\";\n    default:\n      return \"Unknown\";\n  }\n}\n","import React from \"react\";\nimport { HashRouter as Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"src/components/Navbar/Navbar\";\nimport { ROUTES } from \"src/constants\";\nimport Homepage from \"src/pages/Homepage/Homepage\";\nimport PlaylistCompare from \"src/pages/PlaylistCompare/PlaylistCompare\";\nimport SearchContainer from \"src/pages/Search/SearchContainer\";\nimport RubinContainer from \"src/pages/Tools/ToolsContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route path={ROUTES.SEARCH} component={SearchContainer} />\n        <Route path={ROUTES.COMPARE} component={PlaylistCompare} />\n        <Route path={ROUTES.TOOLS} component={RubinContainer} />\n        <Route exact path={ROUTES.HOME} component={Homepage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"src/App\";\nimport * as serviceWorker from \"src/serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/black-logo.5e670a4b.png\";","module.exports = __webpack_public_path__ + \"static/media/green-logo.feb227e2.png\";"],"sourceRoot":""}
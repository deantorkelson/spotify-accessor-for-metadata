{"version":3,"sources":["static/black-logo.png","static/green-logo.png","constants.ts","utils/api/SpotifyApiService/SpotifyApiService.tsx","components/Navbar/Navbar.tsx","pages/Homepage/Homepage.tsx","components/TextInput/TextInput.tsx","helpers/helpers.ts","static/additionalStrings.ts","pages/PlaylistCompare/PlaylistCompare.tsx","pages/Search/SearchPresenter.tsx","models/api/TrackMetadataResponse.ts","pages/Search/SearchContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ENVIRONMENTS","HttpMethod","ROUTES","Navbar","className","to","src","greenLogo","alt","React","Component","Homepage","BASE_URL","readmeLink","href","getReadmeLink","githubIssuesLink","getGithubIssuesLink","blackLogo","TextInput","text","Form","inline","Control","placeholder","this","props","type","onKeyPress","event","key","preventDefault","submit","onChange","value","target","Button","variant","onClick","parseUriFromLink","link","playlistId","split","pop","SpotifyApiService","api_url","console","log","process","REACT_APP_ENV","DEV","searchQuery","get","playlistUri","trackUri","artistUri","playlistUris","body","JSON","stringify","post","endpoint","fetch","then","response","json","options","method","POST","headers","en","search","tooltips","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","valence","playlistCompare","tooltip","he","require","PlaylistCompare","useState","searchResults","setSearchResults","searchLoading","setSearchLoading","Set","selectedPlaylists","setSelectedPlaylists","compareLoading","setCompareLoading","modalIsOpen","setModalIsOpen","modalData","setModalData","spotifyApiService","addPlaylist","playlist","playlists","add","compareSubmit","additional","forEach","push","uri","concat","comparePlaylists","data","closeModal","searchResult","result","onClickFn","images","url","name","owner","display_name","description","decode","tracks","total","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","query","includes","isPlaylistLink","playlistDetails","searchPlaylists","items","length","Spinner","animation","map","size","playlistItems","getPlaylistList","isOpen","onRequestClose","style","content","margin","width","names","artists","artist","songs","song","SearchPresenter","artistName","artistMetadata","audioFeatureSliderData","fetchMetadata","loading","searchSubmit","trackName","trackMetadata","album","audioFeatureSlider","title","fontSize","Slider","disabled","track","max","displayGenres","genres","join","duration_ms","mode","keyNumberToString","modeNumberToString","tempo","time_signature","slice","sliderData","displayTrackMetadata","followers","toLocaleString","popularity","SearchContainer","setArtistName","setArtistMetadata","setLoading","setTrackName","setTrackMetadata","fetchTrackMetadata","fetchArtistMetadata","createAudioFeatureSliderData","searchTracks","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f151fba1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black-logo.5e670a4b.png\";","module.exports = __webpack_public_path__ + \"static/media/green-logo.feb227e2.png\";","export enum ENVIRONMENTS {\n  DEV=\"DEV\",\n  PROD=\"PROD\",\n}\n\nexport const DEAN_URI = 'spotify/playlist/0ndBAQglIRXPRdh2SDXfcD';\n\nexport const ROUTES = {\n  HOME: '/',\n  SEARCH: '/search',\n  COMPARE: '/compare',\n}","import { ENVIRONMENTS } from 'src/constants';\nimport { ArtistMetadataResponse } from 'src/models/api/ArtistMetadataResponse';\nimport { SearchTracksResponse } from 'src/models/api/SearchTracksResponse';\nimport { TrackMetadataResponse } from 'src/models/api/TrackMetadataResponse';\nimport { SearchPlaylistsResponse } from 'src/models/api/SearchPlaylistsResponse';\nimport { ComparePlaylistsResponse } from 'src/models/api/ComparePlaylistsResponse';\nimport { Playlist } from 'src/models/Playlist';\n\nenum HttpMethod {\n  GET = 'GET',\n  POST = 'POST'\n}\n\nexport class SpotifyApiService {\n  readonly api_url: string;\n\n  constructor() {\n    console.log(process.env.REACT_APP_ENV)\n    if (process.env.REACT_APP_ENV === ENVIRONMENTS.DEV) {\n      this.api_url = 'http://127.0.0.1:5000'\n    } else {\n      this.api_url = 'http://spotify-accessor-for-metadata.eba-7tn7wevk.us-east-2.elasticbeanstalk.com/'\n    }\n  }\n\n  public searchTracks(searchQuery: string): Promise<SearchTracksResponse> {\n    return this.get(this.api_url + `/search/tracks?q=${searchQuery}`);\n  }\n\n  public searchPlaylists(searchQuery: string): Promise<SearchPlaylistsResponse> {\n    return this.get(this.api_url + `/search/playlists?q=${searchQuery}`);\n  }\n\n  public playlistDetails(playlistUri: string): Promise<Playlist> {\n    return this.get(this.api_url + `/playlistDetails/${playlistUri}`);\n  }\n\n  public fetchTrackMetadata(trackUri: string): Promise<TrackMetadataResponse> {\n    return this.get(this.api_url + `/fetchTrackMetadata/${trackUri}`);\n  }\n\n  public fetchArtistMetadata(artistUri: string): Promise<ArtistMetadataResponse> {\n    return this.get(this.api_url + `/fetchArtistMetadata/${artistUri}`);\n  }\n\n  public comparePlaylists(playlistUris: string[]): Promise<ComparePlaylistsResponse> {\n    const body = JSON.stringify({\n      \"uris\": playlistUris\n    })\n    return this.post(this.api_url + '/comparePlaylists', body);\n  }\n\n  public get(endpoint: string): Promise<any> {\n    return fetch(endpoint).then((response: any) => response.json());\n  }\n\n  public post(endpoint: string, body: string): Promise<any> {\n    let options = {\n      method: HttpMethod.POST,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body,\n    }\n    return fetch(endpoint, options).then((response: any) => response.json());\n  }\n}\n\nexport default SpotifyApiService;","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { ROUTES } from 'src/constants';\nimport greenLogo from 'src/static/green-logo.png'\nimport './Navbar.css'\n\n\nexport class Navbar extends React.Component<{}, {}> {\n\n  render() {\n    return (\n      <div className='navbar'>\n        <Link className='logo' to={ROUTES.HOME}>\n          <img className='logo-img' src={greenLogo} alt={'Logo for S.A.M.'}/>\n          <h1 className='title'>Spotify Accessor for Metadata</h1>\n        </Link>\n        <ul className='links'>\n          <li>\n            <Link to={ROUTES.HOME}>HOME</Link>\n          </li>\n          <li>\n            <Link to={ROUTES.SEARCH}>SEARCH</Link>\n          </li>\n          <li>\n            <Link to={ROUTES.COMPARE}>COMPARE PLAYLISTS</Link>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react'\n\nimport blackLogo from 'src/static/black-logo.png'\nimport './Homepage.css'\n\nconst Homepage = () => {\n  const BASE_URL = 'https://github.com/deantorkelson/spotify-accessor-for-metadata'\n\n  const getReadmeLink = () => {\n    let readmeLink = `${BASE_URL}/blob/master/README.md`;\n    return <a className='readme' href={readmeLink}>readme</a>;\n  }\n\n  const getGithubIssuesLink = () => {\n    let githubIssuesLink = `${BASE_URL}/issues`;\n    return <a className='readme' href={githubIssuesLink}>Github Issues</a>\n  }\n\n  return (\n    <div className='page'>\n      <div>\n        <h1><br /><br />Welcome to the Spotify Accessor for Metadata!</h1>\n        <div className='main-text'>\n          <h3>\n            This website was designed to allow you to do more with the metadata stored by Spotify. It's still in development, so please refer to the {getReadmeLink()} or {getGithubIssuesLink()} to see what's in store!\n          </h3>\n        </div>\n      </div>\n      <img className='main-logo' src={blackLogo} alt='Spotify Accessor for Metadata logo' />\n    </div>\n  )\n}\n\nexport default Homepage;","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport blackLogo from 'src/static/black-logo.png'\nimport './TextInput.css'\n\ninterface TextInputProps {\n  placeholder: string;\n  submit: any;\n}\n\nexport class TextInput extends React.Component<TextInputProps, {}> {\n  private text = '';\n\n  render() {\n    return (\n      <Form className='input' inline>\n        <Form.Control\n          className='text-input'\n          placeholder={this.props.placeholder}\n          type=\"text\" \n          onKeyPress={(event: any) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              this.props.submit();\n            }\n          }}\n          onChange={(value: any) =>\n            this.text = value.target.value\n          }\n        />\n        <Button className='submit' type=\"button\" variant=\"outline-success\" onClick={() => this.props.submit(this.text)}>\n          <img className='submit-img' src={blackLogo} alt='Submit' />\n        </Button>\n      </Form>\n    )\n  }\n}\n\nexport default TextInput;","const spotifyUriRegex = /(spotify[/:]playlist[/:]([a-zA-Z0-9]+)[,\\s]+)+(spotify[/:]playlist[/:]([a-zA-Z0-9]+))/\n\nexport const isUriList = (str: string): boolean => (\n  spotifyUriRegex.test(str)\n)\n\nexport const parseUriFromLink = (link: string): string => {\n  const withoutQueryParams = link.split('?')[0];\n  const playlistId = withoutQueryParams.split('/').pop();\n  return `spotify:playlist:${playlistId}`;\n}\n\nexport const parseUriListFromLinks = (query: string): string[] => {\n  const links = query.split(',');\n  return links.map((link) => parseUriFromLink(link));\n}\n\nexport const isPlaylistLink = (query: string) => {\n  return query.includes('open.spotify.com/playlist');\n}","export const en = {\n  search: {\n    tooltips: {\n      acousticness: 'A confidence measure from 0.0 to 1.0 of whether the track is acoustic.',\n      danceability: 'Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.',\n      energy: 'Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.',\n      instrumentalness: 'Predicts whether a track contains no vocals. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.',\n      liveness: 'Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.',\n      loudness: 'The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.',\n      speechiness: 'Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.',\n      valence: 'A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track.'\n    },\n    placeholder: 'Enter the name of a song or artist...'\n  },\n  playlistCompare: {\n    placeholder: 'Search for a playlist...',\n    tooltip: 'This would look like \"https://open.spotify.com/playlist/5YfQFj40rrMiUp5hutvfH6\"',\n  }\n\n}\n\nexport default en;","import React, { useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Modal from 'react-modal';\n\nimport TextInput from 'src/components/TextInput/TextInput'\nimport { isPlaylistLink, parseUriFromLink } from 'src/helpers/helpers';\nimport { Playlist } from 'src/models/Playlist'\nimport SpotifyApiService from 'src/utils/api/SpotifyApiService/SpotifyApiService'\nimport en from 'src/static/additionalStrings';\nimport './PlaylistCompare.css'\nimport '../ResultList.css'\nimport { DEAN_URI } from 'src/constants';\n\nlet he = require('he');\n\nexport const PlaylistCompare = () => {\n  const [searchResults, setSearchResults] = useState([] as Playlist[]);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [selectedPlaylists, setSelectedPlaylists] = useState(new Set() as Set<Playlist>);\n  const [compareLoading, setCompareLoading] = useState(false);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalData, setModalData] = useState();\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const addPlaylist = (playlist: Playlist) => {\n    let playlists = new Set(selectedPlaylists)\n    playlists.add(playlist);\n    setSelectedPlaylists(playlists);\n  }\n\n  const searchSubmit = (query: string) => {\n    if (query) {\n      // if words, search for words\n      // if list of links, parse out the URIs and send to the backend\n      console.log(query)\n      if (isPlaylistLink(query)) {\n        console.log('is playlist')\n        setSearchLoading(true);\n        const playlistUri = parseUriFromLink(query);\n        spotifyApiService.playlistDetails(playlistUri).then(data => {\n          console.log({data});\n          addPlaylist(data);\n        });\n        setSearchLoading(false);\n      } else {\n        console.log('is NAUR playlist')\n        setSearchLoading(true)\n        spotifyApiService.searchPlaylists(query).then(data => {\n          setSearchResults(data.playlists.items);\n          setSearchLoading(false);\n        });\n      }\n    }\n  }\n\n  const compareSubmit = (playlists: Set<Playlist>, additional: string[] = []) => {\n    setCompareLoading(true);\n    let playlistUris = additional;\n    playlists.forEach((playlist: Playlist) => {\n      playlistUris.push(playlist.uri)\n    })\n    playlistUris.concat(additional);\n    spotifyApiService.comparePlaylists(playlistUris).then(data => {\n      setCompareLoading(false);\n      setModalIsOpen(true);\n      setModalData(data);\n    });\n  }\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  }\n\n  const commonPlaylistData = () => (\n    !modalData\n    ? <></>\n    : <>\n        <Button variant={'outline-secondary'} onClick={closeModal}>\n          Close\n        </Button>\n        <div className='modal-body'>\n          <div className='column-30'>\n            <div className='header'>\n              Comparing these playlists:\n            </div>\n            {modalData.names.map((playlist: string) => (\n              <div>\n                {playlist}\n              </div>\n            ))}\n          </div>\n          <div className='column'>\n            <div className='header'>\n              Common artists:\n            </div>\n            <ul>\n              {modalData.artists.map((artist: string) =>\n                <div className='modal-li'>\n                  {artist}\n                </div>\n              )}\n            </ul>\n          </div>\n          <div className='column'>\n            <div className='header'>\n              Common songs:\n            </div>\n            <ul>\n              {modalData.songs.map((song: string) =>\n                <div className='modal-li'>\n                  {song}\n                </div>\n              )}\n            </ul>\n          </div>\n        </div>\n      </>\n  )\n\n  const createSearchResultList = () => (\n    searchResults.length === 0 && !searchLoading\n    ? <div key='-1'>No search results found.</div>\n    : <>\n        {searchLoading ?\n          <div>\n            <Spinner animation='border' />\n            <div>\n              *note that the first search might take extra time while the Heroku dyno spins up.\n            </div>\n          </div>\n          :\n          <div className='result-list'>\n            {searchResults.map((playlist: Playlist) => searchResult(playlist,\n              () => addPlaylist(playlist)\n            ))}\n          </div>}\n      </>\n  )\n\n  const searchResult = (result: Playlist, onClickFn: any) => (\n    <div key={result.uri}>\n      <Button variant='outline-secondary' onClick={() => {\n        onClickFn(result);\n      }}>\n        <div className='result'>\n          <img className='cover-img' src={result.images[0].url} alt={`Cover for ${result.name}`} />\n          <section className='result-text'>\n            <div>\n              <b>{result.name}</b> by {result.owner.display_name}\n            </div>\n            {result.description &&\n            <div>\n                Description: {he.decode(result.description)}\n            </div>}\n            <div>\n              {result.tracks.total} songs\n            </div>\n          </section>\n        </div>\n      </Button>\n    </div>\n  )\n\n  const getPlaylistList = () => {\n    let playlistItems: JSX.Element[] = [];\n    selectedPlaylists.forEach((playlist: Playlist) => {\n      playlistItems.push(searchResult(playlist,\n        () => addPlaylist(playlist)));\n    });\n    return playlistItems;\n  }\n\n  const displaySelectedPlaylists = () => (\n    selectedPlaylists.size === 0\n    ? <div>Please select some playlists to compare.</div>\n    : <div>\n        {getPlaylistList()}\n        {compareLoading || selectedPlaylists.size === 0\n          ?\n          <div>\n            <Spinner animation='border' />\n          </div>\n          :\n          <div className=\"buttons\">\n            <Button\n              className=\"submit\"\n              type=\"button\"\n              variant=\"success\"\n              onClick={() => compareSubmit(selectedPlaylists)}\n            >\n              Submit\n            </Button>\n            <Button\n              className=\"submit\"\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={() => setSelectedPlaylists(new Set())}\n            >\n              Clear\n            </Button>\n            <Button\n              className=\"submit\"\n              type=\"button\"\n              variant=\"danger\"\n              onClick={() => compareSubmit(selectedPlaylists, [DEAN_URI])}\n            >\n              Compare to Dean's music\n            </Button>\n          </div>\n        }\n      </div>\n  )\n\n  const renderTooltip = (props: any) => (\n    <Tooltip {...props}>\n      {en.playlistCompare.tooltip}\n    </Tooltip>\n  )\n\n  return <div className='page'>\n    <div className='header'>\n      Enter the name of the playlist to search for, <br/>or a&nbsp;\n      <OverlayTrigger\n        placement=\"right\"\n        delay={{ show: 100, hide: 400 }}\n        overlay={renderTooltip}\n      >\n        <span className=\"uri-tooltip\">\n          link to a playlist:\n        </span>\n      </OverlayTrigger>\n    </div>\n    <TextInput \n      placeholder={en.playlistCompare.placeholder}\n      submit={searchSubmit} \n    />\n    <div className='main-content'>\n      <div className='column'>\n        {createSearchResultList()}\n      </div>\n      <div className='column'>\n        <div className='header'>\n          Comparing these playlists:\n        </div>\n        {displaySelectedPlaylists()}\n      </div>\n      <div>\n        <Modal\n          isOpen={modalIsOpen}\n          onRequestClose={closeModal}\n          style={{\n            content: {\n              margin: 'auto',\n              width: '75%'\n            },\n          }}\n        >\n          {commonPlaylistData()}\n        </Modal>\n      </div>\n    </div>\n  </div>\n}\n\nexport default PlaylistCompare;","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Slider from '@material-ui/core/Slider'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InfoIconOutlined from '@material-ui/icons/InfoOutlined';\n\nimport TextInput from 'src/components/TextInput/TextInput'\nimport { ArtistMetadataResponse } from 'src/models/api/ArtistMetadataResponse';\nimport { TrackMetadataResponse, getKeyAndMode } from 'src/models/api/TrackMetadataResponse';\nimport { Track } from 'src/models/Track';\nimport { AudioFeatureSliderData } from 'src/types/types';\nimport en from 'src/static/additionalStrings'\nimport './Search.css'\nimport '../ResultList.css'\n\n\ninterface Props {\n  artistName: string;\n  artistMetadata: ArtistMetadataResponse;\n  audioFeatureSliderData: AudioFeatureSliderData[];\n  fetchMetadata: (trackUri: string, trackName: string, artistUri: string, artistName: string) => void;\n  loading: boolean;\n  searchResults: Track[];\n  searchSubmit: (query: string) => void;\n  trackName: string;\n  trackMetadata: TrackMetadataResponse;\n}\n\nexport const SearchPresenter = (props: Props) => {\n  const {\n    artistName,\n    artistMetadata,\n    audioFeatureSliderData,\n    fetchMetadata,\n    loading,\n    searchResults,\n    searchSubmit,\n    trackName,\n    trackMetadata\n  } = props;\n\n  const searchResultList = () => (\n    searchResults.length === 0 && !loading\n    ? <div key='-1'>No search results found.</div>\n    : <div>\n      {loading ?\n        <div>\n          <Spinner animation='border'/>\n          <div>\n            *note that the first search might take extra time while the Heroku dyno spins up.\n          </div>\n        </div> :\n        <div className='result-list'>\n          {searchResults.map((result: Track) => searchResult(result))}\n        </div>}\n      </div>\n  );\n\n  const searchResult = (result: Track) => (\n    <div key={result.uri}>\n      <Button variant='outline-secondary' onClick={() => {\n        fetchMetadata(result.uri, result.name, result.artists[0].uri, result.artists[0].name);\n      }}>\n        <div className='result'>\n          <img className='cover-img' src={result.album.images[0].url} alt={`Album art for ${result.album.name}`} />\n          <section className='result-text'>\n            <b>\n              {result.name}\n            </b>\n            <div>\n              {result.artists[0].name} • {result.album.name}\n            </div>\n          </section>\n        </div>\n      </Button>\n    </div>\n  );\n\n  const audioFeatureSlider = (title: string, tooltip: string, value: number) => (\n    <>\n      <span className='attribute-title'>{title}</span>\n      <Tooltip title={tooltip}>\n        <InfoIconOutlined fontSize='small' />\n      </Tooltip>\n      <Slider disabled track={false} value={value} max={1} />\n    </>\n  )\n\n  const displayTrackMetadata = () => {\n    if (!trackMetadata?.duration_ms)\n      return <div>Please search for and select a song to view its metadata.</div>\n    const columnLength = 4;\n    return (\n      <div>\n        <h3>Audio features for <span className='name'>{trackName}</span>:</h3>\n        <h5>Key: {getKeyAndMode(trackMetadata.key, trackMetadata.mode)}</h5>\n        <h5>Tempo: {trackMetadata.tempo}</h5>\n        <h5>Beats/measure: {trackMetadata.time_signature}</h5>\n        <div className='value-sliders'>\n          <div className='reduced-column'>\n            {audioFeatureSliderData.slice(0, columnLength).map(sliderData => audioFeatureSlider(\n              sliderData.title,\n              sliderData.tooltip,\n              sliderData.value\n            ))}\n          </div>\n          <div className='reduced-column'>\n            {audioFeatureSliderData.slice(columnLength, audioFeatureSliderData.length).map(\n              sliderData => audioFeatureSlider(\n                sliderData.title,\n                sliderData.tooltip,\n                sliderData.value\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const displayArtistMetadata = () => (\n    !artistMetadata?.followers\n    ? <div>Please search for and select a song to view its artist's metadata.</div>\n    : <div>\n        <h3>Additional information on <span className='name'>{artistName}</span>:</h3>\n        <h5>Genres: {displayGenres(artistMetadata.genres)}</h5>\n        <h5>Followers: {artistMetadata.followers.total.toLocaleString()}</h5>\n        <h5>Popularity: {artistMetadata.popularity}</h5>\n      </div>\n  );\n\n  const displayGenres = (genres: string[]) => (\n    !genres.length\n    ? 'No genre information is available for this artist.'\n    : genres.join(', ')\n  );\n\n  return (\n    <div className='page'>\n      <div className='header'>\n        Enter the name of the track to search for:\n      </div>\n      <TextInput \n        placeholder={en.search.placeholder}\n        submit={searchSubmit}\n      />\n      <div className='main-content'>\n        <div className='column'>\n          {searchResultList()}\n        </div>\n        <div className='column'>\n          {displayTrackMetadata()}\n          <hr/>\n          {displayArtistMetadata()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchPresenter;","export interface TrackMetadataResponse {\n    duration_ms: number;\n    key: number;\n    mode: number;\n    time_signature: number;\n    acousticness: number,\n    danceability: number,\n    energy: number,\n    instrumentalness: number,\n    liveness: number,\n    loudness: number,\n    speechiness: number,\n    valence: number,\n    tempo: number,\n}\n\nexport function getKeyAndMode(key: number, mode: number): string {\n    return `${keyNumberToString(key)} ${modeNumberToString(mode)}`\n}\n\nfunction keyNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"C\";\n        case 1:\n            return \"C#/Db\"\n        case 2:\n            return \"D\"\n        case 3:\n            return \"D#/Eb\";\n        case 4:\n            return \"E\"\n        case 5:\n            return \"F\"\n        case 6:\n            return \"F#/Gb\";\n        case 7:\n            return \"G\"\n        case 8:\n            return \"G#/Ab\"\n        case 9:\n            return \"A\";\n        case 10:\n            return \"A#/Bb\"\n        case 11:\n            return \"B\"\n    }\n}\n\nfunction modeNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"minor\";\n        case 1:\n            return \"major\"\n    }\n}\n","import React, {useState} from 'react';\n\nimport { ArtistMetadataResponse } from 'src/models/api/ArtistMetadataResponse';\nimport { TrackMetadataResponse } from 'src/models/api/TrackMetadataResponse';\nimport { Track } from 'src/models/Track';\nimport SearchPresenter from 'src/pages/Search/SearchPresenter';\nimport SpotifyApiService from 'src/utils/api/SpotifyApiService/SpotifyApiService';\nimport en from \"src/static/additionalStrings\";\nimport './Search.css';\nimport '../ResultList.css';\n\nexport const SearchContainer = () => {\n  const [artistName, setArtistName] = useState('');\n  const [artistMetadata, setArtistMetadata] = useState({} as ArtistMetadataResponse);\n  const [searchResults, setSearchResults] = useState([] as Track[]);\n  const [loading, setLoading] = useState(false);\n  const [trackName, setTrackName] = useState('');\n  const [trackMetadata, setTrackMetadata] = useState({} as TrackMetadataResponse);\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const searchSubmit = (query: string) => {\n    if (!query) {\n      return;\n    }\n    setLoading(true);\n    spotifyApiService.searchTracks(query).then(data => {\n      setSearchResults(data.tracks.items);\n      setLoading(false);\n    });\n  };\n\n  const fetchMetadata = (trackUri: string, trackName: string, artistUri: string, artistName: string) => {\n    fetchTrackMetadata(trackUri, trackName);\n    fetchArtistMetadata(artistUri, artistName);\n  }\n\n  const fetchTrackMetadata = (trackUri: string, trackName: string) => {\n    spotifyApiService.fetchTrackMetadata(trackUri).then(data => {\n      setTrackMetadata(data);\n      setTrackName(trackName);\n    });\n  };\n\n  const fetchArtistMetadata = (artistUri: string, artistName: string) => {\n    spotifyApiService.fetchArtistMetadata(artistUri).then(data => {\n      setArtistMetadata(data);\n      setArtistName(artistName);\n    });\n  };\n\n  const createAudioFeatureSliderData = (trackMetadata: TrackMetadataResponse) => (\n    [\n      {\n        title: 'Acousticness',\n        tooltip: en.search.tooltips.acousticness,\n        value: trackMetadata.acousticness,\n      },\n      {\n        title: 'Danceability',\n        tooltip: en.search.tooltips.danceability,\n        value: trackMetadata.danceability,\n      },\n      {\n        title: 'Energy',\n        tooltip: en.search.tooltips.energy,\n        value: trackMetadata.energy,\n      },\n      {\n        title: 'Instrumentalness',\n        tooltip: en.search.tooltips.instrumentalness,\n        value: trackMetadata.instrumentalness,\n      },\n      {\n        title: 'Liveness',\n        tooltip: en.search.tooltips.liveness,\n        value: trackMetadata.liveness,\n      },\n      {\n        title: 'Loudness',\n        tooltip: en.search.tooltips.loudness,\n        value: trackMetadata.loudness/(-60),\n      },\n      {\n        title: 'Speechiness',\n        tooltip: en.search.tooltips.speechiness,\n        value: trackMetadata.acousticness,\n      },\n      {\n        title: 'Valence',\n        tooltip: en.search.tooltips.valence,\n        value: trackMetadata.valence,\n      },\n    ]\n  )\n\n  return (\n    <SearchPresenter\n      artistName={artistName}\n      artistMetadata={artistMetadata}\n      audioFeatureSliderData={createAudioFeatureSliderData(trackMetadata)}\n      fetchMetadata={fetchMetadata}\n      loading={loading}\n      searchResults={searchResults}\n      searchSubmit={searchSubmit}\n      trackName={trackName}\n      trackMetadata={trackMetadata}\n    />\n  )\n}\n\nexport default SearchContainer;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Navbar from 'src/components/Navbar/Navbar';\nimport { ROUTES } from 'src/constants';\nimport Homepage from 'src/pages/Homepage/Homepage'\nimport PlaylistCompare from 'src/pages/PlaylistCompare/PlaylistCompare'\nimport SearchContainer from 'src/pages/Search/SearchContainer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar/>\n        <Switch>\n          <Route exact path={ROUTES.SEARCH}>\n            <SearchContainer />\n          </Route>\n          <Route exact path={ROUTES.COMPARE}>\n            <PlaylistCompare/>\n          </Route>\n          <Route exact path={ROUTES.HOME}>\n            <Homepage/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
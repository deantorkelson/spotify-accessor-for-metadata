{"version":3,"sources":["static/black-logo.png","static/green-logo.png","SpotifyApiService/SpotifyApiService.tsx","components/TextInput/TextInput.tsx","pages/Search/Search.tsx","models/AudioFeatures.ts","pages/Homepage/Homepage.tsx","pages/PlaylistCompare/PlaylistCompare.tsx","components/Navbar/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SpotifyApiService","api_url","process","REACT_APP_USE_LOCAL_BACKEND","this","searchQuery","fetch","then","response","json","trackUri","artistUri","playlistUris","options","method","headers","body","JSON","stringify","TextInput","text","Form","className","inline","Control","type","onKeyPress","event","key","preventDefault","props","submit","onChange","value","target","Button","variant","onClick","src","blackLogo","alt","React","Component","Search","spotifyApiService","searchSubmit","bind","state","searchResults","trackName","artistName","trackMetadata","artistMetadata","loading","query","setState","searchTracks","data","tracks","items","songUri","fetchTrackMetadata","fetchArtistMetadata","length","Spinner","animation","map","result","createSearchResult","uri","name","artists","album","images","url","metadata","duration_ms","mode","keyNumberToString","modeNumberToString","tempo","time_signature","Tooltip","title","fontSize","Slider","disabled","track","acousticness","max","danceability","energy","instrumentalness","liveness","loudness","speechiness","valence","followers","displayGenres","genres","total","toLocaleString","popularity","join","createSearchResultList","displayTrackMetadata","displayArtistMetadata","Homepage","BASE_URL","readmeLink","href","githubIssuesLink","getReadmeLink","getGithubIssuesLink","he","require","PlaylistCompare","closeModal","searchLoading","selectedPlaylists","Set","compareLoading","modalIsOpen","modalData","undefined","searchPlaylists","playlists","forEach","playlist","push","comparePlaylists","artist","songs","song","set","add","onClickFn","owner","display_name","description","decode","playlistItems","delete","size","getPlaylistList","compareSubmit","displaySelectedPlaylists","isOpen","onRequestClose","commonData","Navbar","to","greenLogo","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c935695.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black-logo.5e670a4b.png\";","module.exports = __webpack_public_path__ + \"static/media/green-logo.feb227e2.png\";","import SamplePlaylistCompare from '../static/sample-data/SamplePlaylistCompare.json'\n\nexport class SpotifyApiService {\n    private api_url: string;\n\n    constructor() {\n        if(process.env.REACT_APP_USE_LOCAL_BACKEND === \"1\") {\n            this.api_url = 'http://127.0.0.1:5000'\n          } else {\n            this.api_url = 'https://spotify-accessor-for-metadata.herokuapp.com'\n          }\n        \n    }\n\n    public searchTracks(searchQuery: string): Promise<any> {\n        return fetch(this.api_url + `/search/tracks/${searchQuery}`).then(response => response.json());\n    }\n    \n    public searchPlaylists(searchQuery: string): Promise<any> {\n        return fetch(this.api_url + `/search/playlists/${searchQuery}`).then(response => response.json());\n    }\n\n    public fetchTrackMetadata(trackUri: string): Promise<any> {\n        return fetch(this.api_url + `/fetchTrackMetadata/${trackUri}`).then(response => response.json());\n    }\n\n    public fetchArtistMetadata(artistUri: string): Promise<any> {\n        return fetch(this.api_url + `/fetchArtistMetadata/${artistUri}`).then(response => response.json());\n    }\n\n    public comparePlaylists(playlistUris: string[]): Promise<any> {\n        let options = {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                \"uris\": playlistUris\n            })\n        }\n        return fetch(this.api_url + '/comparePlaylists', options).then(response => response.json());\n    }\n}\n\nexport default SpotifyApiService;","import React from 'react'\nimport blackLogo from '../../static/black-logo.png'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport './TextInput.css'\n\ninterface TextInputProps {\n  submit: any;\n}\n\n\nexport class TextInput extends React.Component<TextInputProps, {}> {\n  private text = '';\n\n  render() {\n    return (\n      <Form className='input' inline>\n        <Form.Control\n          type=\"text\" onKeyPress={(event: any) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              this.props.submit();\n            }\n          }}\n          onChange={(value: any) =>\n            this.text = value.target.value\n          }\n        />\n        <Button className='submit' type=\"button\" variant=\"outline-success\" onClick={() => this.props.submit(this.text)}>\n          <img className='submit-img' src={blackLogo} alt='Submit' />\n        </Button>\n      </Form>\n    )\n  }\n}\n\nexport default TextInput;","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Slider from '@material-ui/core/Slider'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InfoIconOutlined from '@material-ui/icons/InfoOutlined';\n\nimport SpotifyApiService from '../../SpotifyApiService/SpotifyApiService'\nimport { Track } from '../../models/Track';\nimport { AudioFeatures, getKeyAndMode } from '../../models/AudioFeatures';\nimport { Artist } from '../../models/Artist';\nimport TextInput from '../../components/TextInput/TextInput'\nimport '../ResultList.css'\nimport './Search.css'\n\ninterface SearchState {\n  searchResults: Track[];\n  trackName: string;\n  artistName: string;\n  trackMetadata: AudioFeatures;\n  artistMetadata: Artist;\n  loading: boolean;\n}\n\nexport class Search extends React.Component<{}, SearchState> {\n\n  private spotifyApiService: SpotifyApiService = new SpotifyApiService();\n\n  constructor(props: any) {\n    super(props);\n    this.searchSubmit = this.searchSubmit.bind(this);\n    this.state = {\n      searchResults: [],\n      trackName: '',\n      artistName: '',\n      trackMetadata: {} as AudioFeatures,\n      artistMetadata: {} as Artist,\n      loading: false\n    }\n  }\n\n  searchSubmit(query: string): void {\n    if (query) {\n      this.setState({loading: true});\n      this.spotifyApiService.searchTracks(query).then(data => {\n        this.setState({ searchResults: data.tracks.items, loading: false });\n      });\n    }\n  }\n\n  fetchTrackMetadata(songUri: string, trackName: string): void {\n    this.spotifyApiService.fetchTrackMetadata(songUri).then(data => {\n      this.setState(\n        {\n          trackMetadata: data,\n          trackName: trackName\n        });\n    })\n  }\n\n  fetchArtistMetadata(artistUri: string, artistName: string): void {\n    this.spotifyApiService.fetchArtistMetadata(artistUri).then(data => {\n      this.setState(\n        {\n          artistMetadata: data,\n          artistName: artistName\n        });\n    })\n  }\n\n  createSearchResultList(): JSX.Element {\n    if (this.state.searchResults.length === 0 && !this.state.loading) {\n      return <div key='-1'>No search results found.</div>\n    }\n    return (\n      <div>\n        {this.state.loading ? \n        <div>\n          <Spinner animation='border'/>\n          <div>\n            *note that the first search might take extra time while the Heroku dyno spins up.\n          </div>\n        </div> :\n        <div className='result-list'>\n          {this.state.searchResults.map((result: Track) => this.createSearchResult(result))}\n        </div>}\n      </div>\n    )\n  }\n\n\n  createSearchResult(result: Track): JSX.Element {\n    return (\n      <div key={result.uri}>\n        <Button variant='outline-secondary' onClick={() => {\n          this.fetchTrackMetadata(result.uri, result.name);\n          this.fetchArtistMetadata(result.artists[0].uri, result.artists[0].name);\n        }}>\n          <div className='result'>\n            <img className='cover-img' src={result.album.images[0].url} alt={`Album art for ${result.album.name}`} />\n            <section className='result-text'>\n              <b>\n                {result.name}\n              </b>\n              <div>\n                {result.artists[0].name} • {result.album.name}\n              </div>\n            </section>\n          </div>\n        </Button>\n      </div>\n    );\n  }\n\n  displayTrackMetadata(): JSX.Element {\n    let metadata = this.state.trackMetadata;\n    if (!metadata?.duration_ms)\n      return <div>Please search for and select a song to view its metadata.</div>\n    let acousticnessTitle = 'A confidence measure from 0.0 to 1.0 of whether the track is acoustic.';\n    let danceabilityTitle = 'Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.';\n    let energyTitle = 'Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.';\n    let instrumentalnessTitle = 'Predicts whether a track contains no vocals. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.';\n    let livenessTitle = 'Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.';\n    let loudnessTitle = 'The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.';\n    let speechinessTitle = 'Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.';\n    let valenceTitle = 'A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track.';\n    return (\n      <div>\n        <h3>Audio features for <span className='name'>{this.state.trackName}</span>:</h3>\n        <h5>Key: {getKeyAndMode(metadata.key, metadata.mode)}</h5>\n        <h5>Tempo: {metadata.tempo}</h5>\n        <h5>Beats/measure: {metadata.time_signature}</h5>\n        <div className='value-sliders'>\n          <div className='reduced-column'>\n            <span className='attribute-title'>Acousticness </span>\n            <Tooltip title={acousticnessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.acousticness} max={1} />\n\n            <span className='attribute-title'>Danceability </span>\n            <Tooltip title={danceabilityTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.danceability} max={1} />\n\n            <span className='attribute-title'>Energy </span>\n            <Tooltip title={energyTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.energy} max={1} />\n\n            <span className='attribute-title'>Instrumentalness </span>\n            <Tooltip title={instrumentalnessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.instrumentalness} max={1} />\n          </div>\n\n          <div className='reduced-column'>\n            <span className='attribute-title'>Liveness </span>\n            <Tooltip title={livenessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.liveness} max={1} />\n\n            <span className='attribute-title'>Loudness </span>\n            <Tooltip title={loudnessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.loudness * -1} max={60} />\n\n            <span className='attribute-title'>Speechiness </span>\n            <Tooltip title={speechinessTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.speechiness} max={1} />\n\n            <span className='attribute-title'>Valence </span>\n            <Tooltip title={valenceTitle}>\n              <InfoIconOutlined fontSize='small' />\n            </Tooltip>\n            <Slider disabled track={false} value={metadata.valence} max={1} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  displayArtistMetadata(): JSX.Element {\n    let metadata = this.state.artistMetadata;\n    if (!metadata?.followers)\n      return <div>Please search for and select a song to view its artist's metadata.</div>\n    return (\n      <div>\n        <h3>Additional information on <span className='name'>{this.state.artistName}</span>:</h3>\n        <h5>Genres: {this.displayGenres(metadata.genres)}</h5>\n        <h5>Followers: {metadata.followers.total.toLocaleString()}</h5>\n        <h5>Popularity: {metadata.popularity}</h5>\n      </div>\n    );\n  }\n\n  displayGenres(genres: string[]): string {\n    if (!genres.length)\n      return 'No genre information is available for this artist.';\n    return genres.join(', ');\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <div className='header'>\n          Enter the name of the track to search for:\n        </div>\n        <TextInput submit={this.searchSubmit}/>\n        <div className='main-content'>\n          <div className='column'>\n            {this.createSearchResultList()}\n          </div>\n          <div className='column'>\n            {this.displayTrackMetadata()}\n            <hr/>\n            {this.displayArtistMetadata()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;","export interface AudioFeatures {\n    duration_ms: number;\n    key: number;\n    mode: number;\n    time_signature: number;\n    acousticness : number,\n    danceability : number,\n    energy : number,\n    instrumentalness : number,\n    liveness : number,\n    loudness : number,\n    speechiness : number,\n    valence : number,\n    tempo : number\n}\n\nexport function getKeyAndMode(key: number, mode: number): string {\n    return `${keyNumberToString(key)} ${modeNumberToString(mode)}`\n}\n\nfunction keyNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"C\";\n        case 1:\n            return \"C#/Db\"\n        case 2:\n            return \"D\"\n        case 3:\n            return \"D#/Eb\";\n        case 4:\n            return \"E\"\n        case 5:\n            return \"F\"\n        case 6:\n            return \"F#/Gb\";\n        case 7:\n            return \"G\"\n        case 8:\n            return \"G#/Ab\"\n        case 9:\n            return \"A\";\n        case 10:\n            return \"A#/Bb\"\n        case 11:\n            return \"B\"\n    }\n}\n\nfunction modeNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"minor\";\n        case 1:\n            return \"major\"\n    }\n}\n","import React from 'react'\nimport blackLogo from '../../static/black-logo.png'\nimport './Homepage.css'\n\nexport class Homepage extends React.Component {\n\n  private BASE_URL = 'https://github.com/deantorkelson/spotify-accessor-for-metadata'\n\n  getReadmeLink(): JSX.Element {\n    let readmeLink = `${this.BASE_URL}/blob/master/README.md`;\n    return <a className='readme' href={readmeLink}>readme</a>\n  }\n\n  getGithubIssuesLink(): JSX.Element {\n    let githubIssuesLink = `${this.BASE_URL}/issues`;\n    return <a className='readme' href={githubIssuesLink}>Github Issues</a>\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <div>\n          <h1><br /><br />Welcome to the Spotify Accessor for Metadata!</h1>\n          <div className='main-text'>\n            <h3>\n              This website was designed to allow you to do more with the metadata stored by Spotify. It's still in development, so please refer to the {this.getReadmeLink()} or {this.getGithubIssuesLink()} to see what's in store!\n            </h3>\n          </div>\n        </div>\n        <img className='main-logo' src={blackLogo} alt='Spotify Accessor for Metadata logo' />\n      </div>\n    )\n  }\n}\n\nexport default Homepage;","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner';\nimport Modal from 'react-modal';\n\nimport SpotifyApiService from '../../SpotifyApiService/SpotifyApiService'\nimport TextInput from '../../components/TextInput/TextInput'\nimport { Playlist } from '../../models/Playlist'\nimport '../ResultList.css'\nimport './PlaylistCompare.css'\nlet he = require('he');\n\n\ninterface PlaylistCompareState {\n  searchResults: Playlist[];\n  searchLoading: boolean;\n  selectedPlaylists: Set<Playlist>;\n  compareLoading: boolean;\n  modalIsOpen: boolean;\n  modalData: any;\n}\n\nexport class PlaylistCompare extends React.Component<{}, PlaylistCompareState> {\n\n  private spotifyApiService: SpotifyApiService = new SpotifyApiService();\n\n  constructor(props: any) {\n    super(props);\n    this.searchSubmit = this.searchSubmit.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.state = {\n      searchResults: [],\n      searchLoading: false,\n      selectedPlaylists: new Set(),\n      compareLoading: false,\n      modalIsOpen: false,\n      modalData: undefined\n    }\n  }\n\n  searchSubmit(query: string): void {\n    if (query) {\n      this.setState({ searchLoading: true });\n      this.spotifyApiService.searchPlaylists(query).then(data => {\n        this.setState({ searchResults: data.playlists.items, searchLoading: false });\n      });\n    }\n  }\n\n  compareSubmit(playlists: Set<Playlist>): void {\n    this.setState({ compareLoading: true });\n    let playlistUris: string[] = [];\n    playlists.forEach((playlist: Playlist) => {\n      playlistUris.push(playlist.uri)\n    })\n    this.spotifyApiService.comparePlaylists(playlistUris).then(data => {\n      this.setState({ compareLoading: false, modalIsOpen: true, modalData: data });\n    });\n  }\n\n  closeModal(): void {\n    this.setState({ modalIsOpen: false })\n  }\n\n  commonData(): JSX.Element {\n    if (!this.state.modalData)\n      return <></>\n    return <>\n      <Button variant={'outline-secondary'} onClick={this.closeModal}>\n        Close\n      </Button>\n      <div className='modalContent'>\n        <div className='column'>\n          <div className='header'>\n            Common artists:\n          </div>\n          <ul>\n            {this.state.modalData.artists.map((artist: string) =>\n              <div className='modal-li'>\n                {artist}\n              </div>\n            )}\n          </ul>\n        </div>\n        <div className='column'>\n          <div className='header'>\n            Common songs:\n          </div>\n          <ul>\n            {this.state.modalData.songs.map((song: string) =>\n              <div className='modal-li'>\n                {song}\n              </div>\n            )}\n          </ul>\n        </div>\n      </div>\n    </>\n  }\n\n  createSearchResultList(): JSX.Element {\n    if (this.state.searchResults.length === 0 && !this.state.searchLoading) {\n      return <div key='-1'>No search results found.</div>\n    }\n    return (\n      <>\n        {this.state.searchLoading ?\n          <div>\n            <Spinner animation='border' />\n            <div>\n              *note that the first search might take extra time while the Heroku dyno spins up.\n            </div>\n          </div>\n          :\n          <div className='result-list'>\n            {this.state.searchResults.map((playlist: Playlist) => this.createSearchResult(playlist,\n              () => {\n                let set = new Set(this.state.selectedPlaylists)\n                set.add(playlist);\n                this.setState({ selectedPlaylists: set })\n              }\n            ))}\n          </div>}\n      </>\n    )\n  }\n\n  createSearchResult(result: Playlist, onClickFn: any): JSX.Element {\n    return (\n      <div key={result.uri}>\n        <Button variant='outline-secondary' onClick={() => {\n          onClickFn(result);\n        }}>\n          <div className='result'>\n            <img className='cover-img' src={result.images[0].url} alt={`Cover for ${result.name}`} />\n            <section className='result-text'>\n              <div>\n                <b>{result.name}</b> by {result.owner.display_name}\n              </div>\n              {result.description &&\n                <div>\n                  Description: {he.decode(result.description)}\n                </div>}\n              <div>\n                {result.tracks.total} songs\n              </div>\n            </section>\n          </div>\n        </Button>\n      </div>\n    );\n  }\n\n  getPlaylistList(): JSX.Element[] {\n    let playlistItems: JSX.Element[] = [];\n    this.state.selectedPlaylists.forEach((playlist: Playlist) => {\n      playlistItems.push(this.createSearchResult(playlist,\n        () => {\n          let set = new Set(this.state.selectedPlaylists)\n          set.delete(playlist);\n          this.setState({ selectedPlaylists: set })\n        }));\n    });\n    return playlistItems;\n  }\n\n  displaySelectedPlaylists(): JSX.Element {\n    if (this.state.selectedPlaylists.size > 0) {\n      return <div>\n        {this.getPlaylistList()}\n        {this.state.compareLoading\n          ?\n          <div>\n            <Spinner animation='border' />\n          </div>\n          :\n          <Button className='submit' type=\"button\" variant=\"outline-success\"\n            onClick={() =>\n              this.compareSubmit(this.state.selectedPlaylists)\n            }>\n            Submit\n          </Button>\n        }\n      </div>\n    }\n    return <div>Please select some playlists to compare.</div>\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <div className='header'>\n          Enter the name of the playlist to search for:\n        </div>\n        <TextInput submit={this.searchSubmit} />\n        <div className='main-content'>\n          <div className='column'>\n            {this.createSearchResultList()}\n          </div>\n          <div className='column'>\n            <div className='header'>\n              Comparing these playlists:\n            </div>\n            {this.displaySelectedPlaylists()}\n          </div>\n          <div>\n            <Modal\n              isOpen={this.state.modalIsOpen}\n              onRequestClose={this.closeModal}\n            >\n              {this.commonData()}\n            </Modal>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PlaylistCompare;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport greenLogo from '../../static/green-logo.png'\nimport './Navbar.css'\n\n\nexport class Navbar extends React.Component<{}, {}> {\n\n  render() {\n    return (\n      <div className='navbar'>\n        <Link className='logo' to='/'>\n          <img className='logo-img' src={greenLogo} alt={'Logo for S.A.M.'}/>\n          <h1 className='title'>Spotify Accessor for Metadata</h1>\n        </Link>\n        <ul className='links'>\n          <li>\n            <Link to='/'>HOME</Link>\n          </li>\n          <li>\n            <Link to='/search'>SEARCH</Link>\n          </li>\n          <li>\n            <Link to='/playlist-compare'>COMPARE PLAYLISTS</Link>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Search from './pages/Search/Search'\nimport Homepage from './pages/Homepage/Homepage'\nimport PlaylistCompare from './pages/PlaylistCompare/PlaylistCompare'\nimport Navbar from './components/Navbar/Navbar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar/>\n        <Switch>\n          <Route path='/search' component={Search}/>\n          <Route path='/playlist-compare' component={PlaylistCompare}/>\n          <Route path='/' component={Homepage}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
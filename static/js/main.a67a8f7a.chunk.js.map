{"version":3,"sources":["static/black-logo.png","static/green-logo.png","SpotifyApiService/SpotifyApiService.tsx","components/Navbar/Navbar.tsx","pages/Homepage/Homepage.tsx","components/TextInput/TextInput.tsx","helpers/helpers.ts","pages/PlaylistCompare/PlaylistCompare.tsx","static/additionalStrings.ts","pages/Search/Search.tsx","models/api/TrackMetadataResponse.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","HttpMethod","Navbar","className","to","src","greenLogo","alt","React","Component","Homepage","BASE_URL","readmeLink","href","getReadmeLink","githubIssuesLink","getGithubIssuesLink","blackLogo","TextInput","text","Form","inline","Control","type","onKeyPress","event","key","preventDefault","props","submit","onChange","value","target","Button","variant","onClick","spotifyUriRegex","SpotifyApiService","api_url","process","REACT_APP_USE_LOCAL_BACKEND","this","searchQuery","get","trackUri","artistUri","playlistUris","body","JSON","stringify","post","endpoint","fetch","then","response","json","options","method","POST","headers","console","log","he","require","PlaylistCompare","useState","searchResults","setSearchResults","searchLoading","setSearchLoading","Set","selectedPlaylists","setSelectedPlaylists","compareLoading","setCompareLoading","modalIsOpen","setModalIsOpen","modalData","setModalData","spotifyApiService","closeModal","searchResult","result","onClickFn","uri","images","url","name","owner","display_name","description","decode","tracks","total","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","query","str","test","split","comparePlaylists","data","searchPlaylists","playlists","items","length","Spinner","animation","map","playlist","add","size","playlistItems","forEach","push","delete","getPlaylistList","compareSubmit","isOpen","onRequestClose","names","join","artists","artist","songs","song","en","search","tooltips","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","valence","Search","loading","setLoading","trackName","setTrackName","artistName","setArtistName","trackMetadata","setTrackMetadata","artistMetadata","setArtistMetadata","songUri","fetchTrackMetadata","fetchArtistMetadata","album","audioFeatureSlider","title","tooltip","fontSize","Slider","disabled","track","max","displayGenres","genres","searchTracks","duration_ms","mode","createAudioFeatureSliderData","keyNumberToString","modeNumberToString","tempo","time_signature","slice","sliderData","displayTrackMetadata","followers","toLocaleString","popularity","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a67a8f7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black-logo.5e670a4b.png\";","module.exports = __webpack_public_path__ + \"static/media/green-logo.feb227e2.png\";","import {ArtistMetadataResponse} from 'src/models/api/ArtistMetadataResponse';\nimport {SearchTracksResponse} from 'src/models/api/SearchTracksResponse';\nimport {TrackMetadataResponse} from 'src/models/api/TrackMetadataResponse';\nimport {SearchPlaylistsResponse} from 'src/models/api/SearchPlaylistsResponse';\nimport {ComparePlaylistsResponse} from 'src/models/api/ComparePlaylistsResponse';\n\nenum HttpMethod {\n  GET = 'GET',\n  POST = 'POST'\n}\n\nexport class SpotifyApiService {\n  readonly api_url: string;\n\n  constructor() {\n    if (process.env.REACT_APP_USE_LOCAL_BACKEND === \"1\") {\n      this.api_url = 'http://127.0.0.1:5000'\n    } else {\n      this.api_url = 'https://spotify-accessor-for-metadata.herokuapp.com'\n    }\n  }\n\n  public searchTracks(searchQuery: string): Promise<SearchTracksResponse> {\n    return this.get(this.api_url + `/search/tracks/${searchQuery}`);\n  }\n\n  public searchPlaylists(searchQuery: string): Promise<SearchPlaylistsResponse> {\n    return this.get(this.api_url + `/search/playlists/${searchQuery}`);\n  }\n\n  public fetchTrackMetadata(trackUri: string): Promise<TrackMetadataResponse> {\n    return this.get(this.api_url + `/fetchTrackMetadata/${trackUri}`);\n  }\n\n  public fetchArtistMetadata(artistUri: string): Promise<ArtistMetadataResponse> {\n    return this.get(this.api_url + `/fetchArtistMetadata/${artistUri}`);\n  }\n\n  public comparePlaylists(playlistUris: string[]): Promise<ComparePlaylistsResponse> {\n    const body = JSON.stringify({\n      \"uris\": playlistUris\n    })\n    return this.post(this.api_url + '/comparePlaylists', body);\n  }\n\n  public get(endpoint: string): Promise<any> {\n    return fetch(endpoint).then((response: any) => response.json());\n  }\n\n  public post(endpoint: string, body: string): Promise<any> {\n    let options = {\n      method: HttpMethod.POST,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body,\n    }\n    console.log({body})\n    return fetch(endpoint, options).then((response: any) => response.json());\n  }\n}\n\nexport default SpotifyApiService;","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport greenLogo from 'src/static/green-logo.png'\nimport './Navbar.css'\n\n\nexport class Navbar extends React.Component<{}, {}> {\n\n  render() {\n    return (\n      <div className='navbar'>\n        <Link className='logo' to='/'>\n          <img className='logo-img' src={greenLogo} alt={'Logo for S.A.M.'}/>\n          <h1 className='title'>Spotify Accessor for Metadata</h1>\n        </Link>\n        <ul className='links'>\n          <li>\n            <Link to='/'>HOME</Link>\n          </li>\n          <li>\n            <Link to='/search'>SEARCH</Link>\n          </li>\n          <li>\n            <Link to='/playlist-compare'>COMPARE PLAYLISTS</Link>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react'\n\nimport blackLogo from 'src/static/black-logo.png'\nimport './Homepage.css'\n\nconst Homepage = () => {\n  const BASE_URL = 'https://github.com/deantorkelson/spotify-accessor-for-metadata'\n\n  const getReadmeLink = () => {\n    let readmeLink = `${BASE_URL}/blob/master/README.md`;\n    return <a className='readme' href={readmeLink}>readme</a>;\n  }\n\n  const getGithubIssuesLink = () => {\n    let githubIssuesLink = `${BASE_URL}/issues`;\n    return <a className='readme' href={githubIssuesLink}>Github Issues</a>\n  }\n\n  return (\n    <div className='page'>\n      <div>\n        <h1><br /><br />Welcome to the Spotify Accessor for Metadata!</h1>\n        <div className='main-text'>\n          <h3>\n            This website was designed to allow you to do more with the metadata stored by Spotify. It's still in development, so please refer to the {getReadmeLink()} or {getGithubIssuesLink()} to see what's in store!\n          </h3>\n        </div>\n      </div>\n      <img className='main-logo' src={blackLogo} alt='Spotify Accessor for Metadata logo' />\n    </div>\n  )\n}\n\nexport default Homepage;","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport blackLogo from 'src/static/black-logo.png'\nimport './TextInput.css'\n\ninterface TextInputProps {\n  submit: any;\n}\n\n\nexport class TextInput extends React.Component<TextInputProps, {}> {\n  private text = '';\n\n  render() {\n    return (\n      <Form className='input' inline>\n        <Form.Control\n          type=\"text\" onKeyPress={(event: any) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              this.props.submit();\n            }\n          }}\n          onChange={(value: any) =>\n            this.text = value.target.value\n          }\n        />\n        <Button className='submit' type=\"button\" variant=\"outline-success\" onClick={() => this.props.submit(this.text)}>\n          <img className='submit-img' src={blackLogo} alt='Submit' />\n        </Button>\n      </Form>\n    )\n  }\n}\n\nexport default TextInput;","const spotifyUriRegex = /(spotify[/:]playlist[/:]([a-zA-Z0-9]+)[,\\s]+)+(spotify[/:]playlist[/:]([a-zA-Z0-9]+))/\n\nexport const isUriList = (str: string) => (\n  spotifyUriRegex.test(str)\n)","import React, { useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Modal from 'react-modal';\n\nimport TextInput from 'src/components/TextInput/TextInput'\nimport { isUriList } from 'src/helpers/helpers';\nimport { Playlist } from 'src/models/Playlist'\nimport SpotifyApiService from 'src/SpotifyApiService/SpotifyApiService'\nimport './PlaylistCompare.css'\nimport '../ResultList.css'\n\nlet he = require('he');\n\nexport const PlaylistCompare = () => {\n  const [searchResults, setSearchResults] = useState([] as Playlist[]);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [selectedPlaylists, setSelectedPlaylists] = useState(new Set() as Set<Playlist>);\n  const [compareLoading, setCompareLoading] = useState(false);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalData, setModalData] = useState();\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const searchSubmit = (query: string) => {\n    if (query) {\n      if (isUriList(query)) {\n        setCompareLoading(true);\n        const playlistUris = query.split(', ')\n        spotifyApiService.comparePlaylists(playlistUris).then(data => {\n          setCompareLoading(false);\n          setModalIsOpen(true);\n          setModalData(data);\n        });\n      } else {\n        setSearchLoading(true)\n        spotifyApiService.searchPlaylists(query).then(data => {\n          setSearchResults(data.playlists.items);\n          setSearchLoading(false);\n        });\n      }\n    }\n  }\n\n  const compareSubmit = (playlists: Set<Playlist>) => {\n    setCompareLoading(true);\n    let playlistUris: string[] = [];\n    playlists.forEach((playlist: Playlist) => {\n      playlistUris.push(playlist.uri)\n    })\n    spotifyApiService.comparePlaylists(playlistUris).then(data => {\n      setCompareLoading(false);\n      setModalIsOpen(true);\n      setModalData(data);\n    });\n  }\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  }\n\n  const commonPlaylistData = () => (\n    !modalData\n    ? <></>\n    : <>\n        <Button variant={'outline-secondary'} onClick={closeModal}>\n          Close\n        </Button>\n        <div className='modalContent'>\n          {\"Comparing these playlists: \" + modalData.names.join(', ')}\n          <div className='column'>\n            <div className='header'>\n              Common artists:\n            </div>\n            <ul>\n              {modalData.artists.map((artist: string) =>\n                <div className='modal-li'>\n                  {artist}\n                </div>\n              )}\n            </ul>\n          </div>\n          <div className='column'>\n            <div className='header'>\n              Common songs:\n            </div>\n            <ul>\n              {modalData.songs.map((song: string) =>\n                <div className='modal-li'>\n                  {song}\n                </div>\n              )}\n            </ul>\n          </div>\n        </div>\n      </>\n  )\n\n  const createSearchResultList = () => (\n    searchResults.length === 0 && !searchLoading\n    ? <div key='-1'>No search results found.</div>\n    : <>\n        {searchLoading ?\n          <div>\n            <Spinner animation='border' />\n            <div>\n              *note that the first search might take extra time while the Heroku dyno spins up.\n            </div>\n          </div>\n          :\n          <div className='result-list'>\n            {searchResults.map((playlist: Playlist) => searchResult(playlist,\n              () => {\n                let playlists = new Set(selectedPlaylists)\n                playlists.add(playlist);\n                setSelectedPlaylists(playlists);\n              }\n            ))}\n          </div>}\n      </>\n  )\n\n  const searchResult = (result: Playlist, onClickFn: any) => (\n    <div key={result.uri}>\n      <Button variant='outline-secondary' onClick={() => {\n        onClickFn(result);\n      }}>\n        <div className='result'>\n          <img className='cover-img' src={result.images[0].url} alt={`Cover for ${result.name}`} />\n          <section className='result-text'>\n            <div>\n              <b>{result.name}</b> by {result.owner.display_name}\n            </div>\n            {result.description &&\n            <div>\n                Description: {he.decode(result.description)}\n            </div>}\n            <div>\n              {result.tracks.total} songs\n            </div>\n          </section>\n        </div>\n      </Button>\n    </div>\n  )\n\n  const getPlaylistList = () => {\n    let playlistItems: JSX.Element[] = [];\n    selectedPlaylists.forEach((playlist: Playlist) => {\n      playlistItems.push(searchResult(playlist,\n        () => {\n          let playlists = new Set(selectedPlaylists)\n          playlists.delete(playlist);\n          setSelectedPlaylists(playlists)\n        }));\n    });\n    return playlistItems;\n  }\n\n  const displaySelectedPlaylists = () => (\n    selectedPlaylists.size === 0\n    ? <div>Please select some playlists to compare.</div>\n    : <div>\n        {getPlaylistList()}\n        {compareLoading\n          ?\n          <div>\n            <Spinner animation='border' />\n          </div>\n          :\n          <Button className='submit' type=\"button\" variant=\"outline-success\"\n            onClick={() =>\n              compareSubmit(selectedPlaylists)\n            }>\n            Submit\n          </Button>\n        }\n      </div>\n  )\n\n  const renderTooltip = (props: any) => (\n    <Tooltip {...props}>\n      {\"These take the form \\\"spotify:playlist:<something>\\\" or \\\"spotify/playlist/<something>\\\"\"}\n    </Tooltip>\n  )\n  return <div className='page'>\n    <div className='header'>\n      Enter the name of the playlist to search for, <br/>or a comma-separated list of&nbsp;\n      <OverlayTrigger\n        placement=\"right\"\n        delay={{ show: 100, hide: 400 }}\n        overlay={renderTooltip}\n      >\n        <span className=\"uri-tooltip\">\n          Spotify URIs:\n        </span>\n      </OverlayTrigger>\n    </div>\n    <TextInput submit={searchSubmit} />\n    <div className='main-content'>\n      <div className='column'>\n        {createSearchResultList()}\n      </div>\n      <div className='column'>\n        <div className='header'>\n          Comparing these playlists:\n        </div>\n        {displaySelectedPlaylists()}\n      </div>\n      <div>\n        <Modal\n          isOpen={modalIsOpen}\n          onRequestClose={closeModal}\n        >\n          {commonPlaylistData()}\n        </Modal>\n      </div>\n    </div>\n  </div>\n}\n\nexport default PlaylistCompare;","export const en = {\n  search: {\n    tooltips: {\n      acousticness: 'A confidence measure from 0.0 to 1.0 of whether the track is acoustic.',\n      danceability: 'Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.',\n      energy: 'Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.',\n      instrumentalness: 'Predicts whether a track contains no vocals. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.',\n      liveness: 'Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.',\n      loudness: 'The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.',\n      speechiness: 'Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.',\n      valence: 'A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track.'\n    }\n  }\n}\n\nexport default en;","import React, {useState} from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Slider from '@material-ui/core/Slider'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InfoIconOutlined from '@material-ui/icons/InfoOutlined';\n\nimport TextInput from 'src/components/TextInput/TextInput'\nimport { ArtistMetadataResponse } from 'src/models/api/ArtistMetadataResponse';\nimport { TrackMetadataResponse, getKeyAndMode } from 'src/models/api/TrackMetadataResponse';\nimport { Track } from 'src/models/Track';\nimport SpotifyApiService from 'src/SpotifyApiService/SpotifyApiService'\nimport en from 'src/static/additionalStrings'\nimport './Search.css'\nimport '../ResultList.css'\n\nexport const Search = () => {\n  const [searchResults, setSearchResults] = useState([] as Track[]);\n  const [loading, setLoading] = useState(false);\n  const [trackName, setTrackName] = useState('');\n  const [artistName, setArtistName] = useState('');\n  const [trackMetadata, setTrackMetadata] = useState({} as TrackMetadataResponse);\n  const [artistMetadata, setArtistMetadata] = useState({} as ArtistMetadataResponse);\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const searchSubmit = (query: string) => {\n    if (!query) {\n      return;\n    }\n    setLoading(true);\n    spotifyApiService.searchTracks(query).then(data => {\n      setSearchResults(data.tracks.items);\n      setLoading(false);\n    });\n  };\n\n  const fetchTrackMetadata = (songUri: string, trackName: string) => {\n    spotifyApiService.fetchTrackMetadata(songUri).then(data => {\n      setTrackMetadata(data);\n      setTrackName(trackName);\n    });\n  };\n\n  const fetchArtistMetadata = (artistUri: string, artistName: string) => {\n    spotifyApiService.fetchArtistMetadata(artistUri).then(data => {\n      setArtistMetadata(data);\n      setArtistName(artistName);\n    });\n  };\n\n  const searchResultList = () => (\n    searchResults.length === 0 && !loading\n    ? <div key='-1'>No search results found.</div>\n    : <div>\n      {loading ?\n        <div>\n          <Spinner animation='border'/>\n          <div>\n            *note that the first search might take extra time while the Heroku dyno spins up.\n          </div>\n        </div> :\n        <div className='result-list'>\n          {searchResults.map((result: Track) => searchResult(result))}\n        </div>}\n      </div>\n  );\n\n  const searchResult = (result: Track) => (\n    <div key={result.uri}>\n      <Button variant='outline-secondary' onClick={() => {\n        fetchTrackMetadata(result.uri, result.name);\n        fetchArtistMetadata(result.artists[0].uri, result.artists[0].name);\n      }}>\n        <div className='result'>\n          <img className='cover-img' src={result.album.images[0].url} alt={`Album art for ${result.album.name}`} />\n          <section className='result-text'>\n            <b>\n              {result.name}\n            </b>\n            <div>\n              {result.artists[0].name} • {result.album.name}\n            </div>\n          </section>\n        </div>\n      </Button>\n    </div>\n  );\n\n  const audioFeatureSlider = (title: string, tooltip: string, value: number) => (\n    <>\n      <span className='attribute-title'>{title}</span>\n      <Tooltip title={tooltip}>\n        <InfoIconOutlined fontSize='small' />\n      </Tooltip>\n      <Slider disabled track={false} value={value} max={1} />\n    </>\n  )\n\n  const createAudioFeatureSliderData = (trackMetadata: TrackMetadataResponse) => (\n    [\n      {\n        title: 'Acousticness',\n        tooltip: en.search.tooltips.acousticness,\n        value: trackMetadata.acousticness,\n      },\n      {\n        title: 'Danceability',\n        tooltip: en.search.tooltips.danceability,\n        value: trackMetadata.danceability,\n      },\n      {\n        title: 'Energy',\n        tooltip: en.search.tooltips.energy,\n        value: trackMetadata.energy,\n      },\n      {\n        title: 'Instrumentalness',\n        tooltip: en.search.tooltips.instrumentalness,\n        value: trackMetadata.instrumentalness,\n      },\n      {\n        title: 'Liveness',\n        tooltip: en.search.tooltips.liveness,\n        value: trackMetadata.liveness,\n      },\n      {\n        title: 'Loudness',\n        tooltip: en.search.tooltips.loudness,\n        value: trackMetadata.loudness/(-60),\n      },\n      {\n        title: 'Speechiness',\n        tooltip: en.search.tooltips.speechiness,\n        value: trackMetadata.acousticness,\n      },\n      {\n        title: 'Valence',\n        tooltip: en.search.tooltips.valence,\n        value: trackMetadata.valence,\n      },\n    ]\n  )\n\n  const displayTrackMetadata = () => {\n    if (!trackMetadata?.duration_ms)\n      return <div>Please search for and select a song to view its metadata.</div>\n    const data = createAudioFeatureSliderData(trackMetadata);\n    const columnLength = 4;\n    return (\n      <div>\n        <h3>Audio features for <span className='name'>{trackName}</span>:</h3>\n        <h5>Key: {getKeyAndMode(trackMetadata.key, trackMetadata.mode)}</h5>\n        <h5>Tempo: {trackMetadata.tempo}</h5>\n        <h5>Beats/measure: {trackMetadata.time_signature}</h5>\n        <div className='value-sliders'>\n          <div className='reduced-column'>\n            {data.slice(0, columnLength).map(sliderData => audioFeatureSlider(\n              sliderData.title,\n              sliderData.tooltip,\n              sliderData.value\n            ))}\n          </div>\n          <div className='reduced-column'>\n            {data.slice(columnLength, data.length).map(sliderData => audioFeatureSlider(\n              sliderData.title,\n              sliderData.tooltip,\n              sliderData.value\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const displayArtistMetadata = () => (\n    !artistMetadata?.followers\n    ? <div>Please search for and select a song to view its artist's metadata.</div>\n    : <div>\n        <h3>Additional information on <span className='name'>{artistName}</span>:</h3>\n        <h5>Genres: {displayGenres(artistMetadata.genres)}</h5>\n        <h5>Followers: {artistMetadata.followers.total.toLocaleString()}</h5>\n        <h5>Popularity: {artistMetadata.popularity}</h5>\n      </div>\n  );\n\n  const displayGenres = (genres: string[]) => (\n    !genres.length\n    ? 'No genre information is available for this artist.'\n    : genres.join(', ')\n  );\n\n  return (\n    <div className='page'>\n      <div className='header'>\n        Enter the name of the track to search for:\n      </div>\n      <TextInput submit={searchSubmit}/>\n      <div className='main-content'>\n        <div className='column'>\n          {searchResultList()}\n        </div>\n        <div className='column'>\n          {displayTrackMetadata()}\n          <hr/>\n          {displayArtistMetadata()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;","export interface TrackMetadataResponse {\n    duration_ms: number;\n    key: number;\n    mode: number;\n    time_signature: number;\n    acousticness: number,\n    danceability: number,\n    energy: number,\n    instrumentalness: number,\n    liveness: number,\n    loudness: number,\n    speechiness: number,\n    valence: number,\n    tempo: number,\n}\n\nexport function getKeyAndMode(key: number, mode: number): string {\n    return `${keyNumberToString(key)} ${modeNumberToString(mode)}`\n}\n\nfunction keyNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"C\";\n        case 1:\n            return \"C#/Db\"\n        case 2:\n            return \"D\"\n        case 3:\n            return \"D#/Eb\";\n        case 4:\n            return \"E\"\n        case 5:\n            return \"F\"\n        case 6:\n            return \"F#/Gb\";\n        case 7:\n            return \"G\"\n        case 8:\n            return \"G#/Ab\"\n        case 9:\n            return \"A\";\n        case 10:\n            return \"A#/Bb\"\n        case 11:\n            return \"B\"\n    }\n}\n\nfunction modeNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"minor\";\n        case 1:\n            return \"major\"\n    }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Navbar from 'src/components/Navbar/Navbar';\nimport Homepage from 'src/pages/Homepage/Homepage'\nimport PlaylistCompare from 'src/pages/PlaylistCompare/PlaylistCompare'\nimport Search from 'src/pages/Search/Search'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar/>\n        <Switch>\n          <Route path='/search' component={Search}/>\n          <Route path='/playlist-compare' component={PlaylistCompare}/>\n          <Route path='/' component={Homepage}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
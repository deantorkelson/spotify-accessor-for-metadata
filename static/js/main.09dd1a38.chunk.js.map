{"version":3,"sources":["static/black-logo.png","static/green-logo.png","constants.ts","components/Navbar/Navbar.tsx","pages/Homepage/Homepage.tsx","components/TextInput/TextInput.tsx","components/ResultList/ResultList.tsx","helpers/helpers.ts","utils/api/SpotifyApiService/SpotifyApiService.tsx","static/additionalStrings.ts","pages/PlaylistCompare/PlaylistCompare.tsx","pages/Search/SearchPresenter.tsx","models/api/TrackMetadataResponse.ts","pages/Search/SearchContainer.tsx","pages/Rubin/RubinPresenter.tsx","pages/Rubin/RubinContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ENVIRONMENTS","ROUTES","Navbar","className","exact","to","src","greenLogo","alt","Homepage","BASE_URL","packageJson","version","readmeLink","href","getReadmeLink","githubIssuesLink","getGithubIssuesLink","blackLogo","TextInput","text","Form","inline","Control","placeholder","this","props","type","onKeyPress","event","key","preventDefault","submit","onChange","value","target","Button","variant","onClick","React","Component","createSearchResultList","loading","searchResults","formatter","Spinner","animation","length","map","result","index","HttpMethod","parseUriFromLink","link","playlistId","split","pop","SpotifyApiService","api_url","process","DEV","searchQuery","get","playlistUri","trackUri","artistUri","playlistUris","body","JSON","stringify","post","endpoint","fetch","then","response","json","options","method","POST","headers","en","search","tooltips","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","valence","playlistCompare","tooltip","he","require","PlaylistCompare","useState","setSearchResults","searchLoading","setSearchLoading","selectedPlaylists","setSelectedPlaylists","compareLoading","setCompareLoading","modalIsOpen","setModalIsOpen","modalData","setModalData","spotifyApiService","addPlaylist","playlist","playlists","Set","add","compareSubmit","additional","forEach","push","uri","concat","comparePlaylists","data","closeModal","playlistText","name","owner","display_name","description","decode","substring","tracks","total","displaySelectedPlaylist","images","url","delete","size","removePlaylist","IndeterminateCheckBox","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","query","includes","isPlaylistLink","playlistDetails","searchPlaylists","items","AddBox","playlistItems","renderSelectedPlaylists","isOpen","onRequestClose","style","content","margin","width","names","artists","artist","songs","song","SearchPresenter","artistName","artistMetadata","fetchMetadata","searchSubmit","trackName","trackMetadata","audioFeatureSliderData","title","audioFeatureSlider","InfoOutlined","fontSize","Slider","disabled","track","max","displayGenres","genres","join","album","Visibility","mode","keyNumberToString","modeNumberToString","tempo","time_signature","slice","sliderData","displayTrackMetadata","followers","toLocaleString","popularity","SearchContainer","setArtistName","setArtistMetadata","setLoading","setTrackName","setTrackMetadata","fetchTrackMetadata","fetchArtistMetadata","searchTracks","RubinPresenter","rubinQuote","bookQuote","quote","author","RubinContainer","setRubinQuote","setBookQuote","useEffect","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,wC,kFCA3CD,EAAOC,QAAU,IAA0B,wC,4xGCA/BC,E,yDAAAA,K,kBAAAA,E,mBAAAA,M,KAKL,IAIMC,EACL,IADKA,EAEH,UAFGA,EAGF,WAHEA,EAIJ,S,iBCmBMC,G,MAzBO,WACpB,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAASC,OAAK,EAACD,UAAU,OAAOE,GAAIJ,GAClC,yBAAKE,UAAU,WAAWG,IAAKC,IAAWC,IAAK,oBAC/C,wBAAIL,UAAU,SAAd,kCAEF,wBAAIA,UAAU,SACZ,4BACE,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAIJ,GAAnB,SAEF,4BACE,kBAAC,IAAD,CAASI,GAAIJ,GAAb,WAEF,4BACE,kBAAC,IAAD,CAASI,GAAIJ,GAAb,sBAEF,4BACE,kBAAC,IAAD,CAASI,GAAIJ,GAAb,c,yBCSKQ,G,MA5BE,WACf,IAAMC,EAAW,iEAYjB,OACE,yBAAKP,UAAU,QACb,6BACE,4BAAI,6BAAM,6BAAV,iDAA+DQ,EAAYC,QAA3E,KACA,yBAAKT,UAAU,aACb,wKAfc,WACpB,IAAIU,EAAU,UAAMH,EAAN,0BACd,OAAO,uBAAGP,UAAU,SAASW,KAAMD,GAA5B,UAc2IE,GAD5I,OAVoB,WAC1B,IAAIC,EAAgB,UAAMN,EAAN,WACpB,OAAO,uBAAGP,UAAU,SAASW,KAAME,GAA5B,iBASgKC,GADjK,8BAKJ,yBAAKd,UAAU,YAAYG,IAAKY,IAAWV,IAAI,0C,mHCWtCW,G,MA5Bf,4MACUC,KAAO,GADjB,uDAGY,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAMlB,UAAU,QAAQmB,QAAM,GAC5B,kBAACD,EAAA,EAAKE,QAAN,CACEpB,UAAU,aACVqB,YAAaC,KAAKC,MAAMF,YACxBG,KAAK,OACLC,WAAY,SAACC,GACO,UAAdA,EAAMC,MACRD,EAAME,iBACN,EAAKL,MAAMM,WAGfC,SAAU,SAACC,GAAD,OACR,EAAKd,KAAOc,EAAMC,OAAOD,SAG7B,kBAACE,EAAA,EAAD,CAAQjC,UAAU,SAASwB,KAAK,SAASU,QAAQ,kBAAkBC,QAAS,kBAAM,EAAKZ,MAAMM,OAAO,EAAKZ,QACvG,yBAAKjB,UAAU,aAAaG,IAAKY,IAAWV,IAAI,iBArB1D,GAA+B+B,IAAMC,YCR9B,SAASC,EAA2BC,EAAkBC,EAA8BC,GACzF,OAAIF,EACM,6BACN,kBAACG,EAAA,EAAD,CAASC,UAAU,WACnB,mHAKAH,EACGA,EAAcI,OAIjB,yBAAK5C,UAAU,eACZwC,EAAcK,KAAI,SAACC,EAAWC,GAAZ,OAAsBN,EAAUK,EAAQC,OAJrD,yBAAKpB,IAAI,MAAT,4BAQL,KCvBT,ICUKqB,EDJQC,EAAmB,SAACC,GAC/B,IACMC,EADqBD,EAAKE,MAAM,KAAK,GACLA,MAAM,KAAKC,MACjD,MAAM,oBAAN,OAA2BF,K,SCCxBH,K,UAAAA,E,aAAAA,M,KAKE,IA8DQM,EA9Df,WAGE,aAAe,yBAFNC,aAEK,EACRC,eAAyB3D,EAAa4D,IACxCnC,KAAKiC,QAAU,uBAEfjC,KAAKiC,QAAU,kDAPrB,yDAWsBG,GAClB,OAAOpC,KAAKqC,IAAIrC,KAAKiC,QAAL,2BAAmCG,MAZvD,sCAeyBA,GACrB,OAAOpC,KAAKqC,IAAIrC,KAAKiC,QAAL,8BAAsCG,MAhB1D,sCAmByBE,GACrB,OAAOtC,KAAKqC,IAAIrC,KAAKiC,QAAL,oBAA4BK,MApBhD,yCAuB4BC,GACxB,OAAOvC,KAAKqC,IAAIrC,KAAKiC,QAAL,iBAAyBM,MAxB7C,0CA2B6BC,GACzB,OAAOxC,KAAKqC,IAAIrC,KAAKiC,QAAL,kBAA0BO,MA5B9C,uCA+B0BC,GACtB,IAAMC,EAAOC,KAAKC,UAAU,CAC1B,KAAQH,IAEV,OAAOzC,KAAK6C,KAAK7C,KAAKiC,QAAU,qBAAsBS,KAnC1D,mCAuCI,OAAO1C,KAAKqC,IAAIrC,KAAKiC,QAAL,mBAvCpB,kCA2CI,OAAOjC,KAAKqC,IAAIrC,KAAKiC,QAAL,wBA3CpB,0BA8Caa,GACT,OAAOC,MAAMD,GAAUE,MAAK,SAACC,GAAD,OAAmBA,EAASC,YA/C5D,2BAkDcJ,EAAkBJ,GAC5B,IAAIS,EAAU,CACZC,OAAQ1B,EAAW2B,KACnBC,QAAS,CACP,eAAgB,oBAElBZ,QAEF,OAAOK,MAAMD,EAAUK,GAASH,MAAK,SAACC,GAAD,OAAmBA,EAASC,cA1DrE,KCMeK,EArBG,CAChBC,OAAQ,CACNC,SAAU,CACRC,aAAc,yEACdC,aAAc,kLACdC,OAAQ,6JACRC,iBAAkB,2MAClBC,SAAU,qJACVC,SAAU,mKACVC,YAAa,2LACbC,QAAS,sFAEXlE,YAAa,yCAEfmE,gBAAiB,CACfnE,YAAa,2BACboE,QAAS,oFCITC,G,YAAKC,EAAQ,KA+QFC,EA7QgB,WAAO,IAAD,EACOC,mBAA+B,MADtC,mBAC5BrD,EAD4B,KACbsD,EADa,OAEOD,oBAAS,GAFhB,mBAE5BE,EAF4B,KAEbC,EAFa,OAGeH,mBAAkC,MAHjD,mBAG5BI,EAH4B,KAGTC,EAHS,OAISL,oBAAS,GAJlB,mBAI5BM,EAJ4B,KAIZC,EAJY,OAKGP,oBAAS,GALZ,mBAK5BQ,EAL4B,KAKfC,EALe,OAMDT,mBAA6C,MAN5C,mBAM5BU,EAN4B,KAMjBC,EANiB,KAQ7BC,EAAoB,IAAInD,EAExBoD,EAAc,SAACC,GACnB,IAAIC,EAAY,IAAIC,IAAIZ,GACxBW,EAAUE,IAAIH,GACdT,EAAqBU,IA8BjBG,EAAgB,SAACH,GAAyD,IAA/BI,EAA8B,uDAAP,GACtEZ,GAAkB,GAClB,IAAIrC,EAAeiD,EACnBJ,EAAUK,SAAQ,SAACN,GACjB5C,EAAamD,KAAKP,EAASQ,QAE7BpD,EAAaqD,OAAOJ,GACpBP,EAAkBY,iBAAiBtD,GAAcO,MAAK,SAAAgD,GACpDlB,GAAkB,GAClBE,GAAe,GACfE,EAAac,OAIXC,EAAa,WACjBjB,GAAe,IAmDXkB,EAAe,SAACb,GAAD,OACnB,yBAAK3G,UAAU,eACb,6BACE,2BAAI2G,EAASc,MADf,OAC6Bd,EAASe,MAAMC,cAG1ChB,EAASiB,aACT,6BAEIlC,EAAGmC,OAAOlB,EAASiB,aAAahF,OAAS,IACrC8C,EAAGmC,OAAOlB,EAASiB,aAAaE,UAAU,EAAG,KAAO,MACpDpC,EAAGmC,OAAOlB,EAASiB,cAI7B,6BACGjB,EAASoB,OAAOC,MADnB,YA4BEC,EAA0B,SAACnF,GAAD,OAC9B,yBAAKnB,IAAKmB,EAAOqE,KACf,yBAAKnH,UAAU,UACb,yBAAKA,UAAU,mBACb,yBACEA,UAAU,YACVG,IAAK2C,EAAOoF,OAAO,GAAGC,IACtB9H,IAAG,oBAAeyC,EAAO2E,QAE3B,kBAACxF,EAAA,EAAD,CACEjC,UAAU,gBACVkC,QAAQ,OACRC,QAAS,kBApJI,SAACwE,GACtB,IAAIC,EAAY,IAAIC,IAAIZ,GACxBW,EAAUwB,OAAOzB,GACjBT,EAAqBU,EAAUyB,KAAOzB,EAAY,MAiJ3B0B,CAAexF,KAE9B,kBAACyF,EAAA,EAAD,QAGHf,EAAa1E,MA0DpB,OAAO,yBAAK9C,UAAU,QACpB,yBAAKA,UAAU,UAAf,iDACgD,6BADhD,WAEE,kBAACwI,EAAA,EAAD,CACEC,UAAU,QACVC,MAAO,CAACC,KAAM,IAAKC,KAAM,KACzBC,QAZgB,SAACtH,GAAD,OACpB,kBAACuH,EAAA,EAAYvH,EACZsD,EAAGW,gBAAgBC,WAYhB,0BAAMzF,UAAU,eAAhB,yBAKJ,kBAAC,EAAD,CACEqB,YAAawD,EAAGW,gBAAgBnE,YAChCQ,OA5NiB,SAACkH,GACpB,GAAIA,EAGF,GH/BwB,SAACA,GAC7B,OAAOA,EAAMC,SAAS,6BG8BdC,CAAeF,GAAQ,CACzB/C,GAAiB,GACjB,IAAMpC,EAAcX,EAAiB8F,GACrCtC,EAAkByC,gBAAgBtF,GAAaU,MAAK,SAAAgD,GAClDZ,EAAYY,MAEdtB,GAAiB,QAEjBA,GAAiB,GACjBS,EAAkB0C,gBAAgBJ,GAAOzE,MAAK,SAAAgD,GAC5CxB,EAAiBwB,EAAKV,UAAUwC,OAChCpD,GAAiB,SA+MvB,yBAAKhG,UAAU,gBACb,yBAAKA,UAAU,UACZsC,EAAiCyD,EAAevD,GApH3B,SAACM,GAAD,OAC1B,yBAAKnB,IAAKmB,EAAOqE,KACf,yBAAKnH,UAAU,UACb,yBAAKA,UAAU,mBACb,yBACEA,UAAU,YACVG,IAAK2C,EAAOoF,OAAO,GAAGC,IACtB9H,IAAG,oBAAeyC,EAAO2E,QAE3B,kBAACxF,EAAA,EAAD,CACEjC,UAAU,gBACVkC,QAAQ,OACRC,QAAS,kBAAMuE,EAAY5D,KAE3B,kBAACuG,EAAA,EAAD,QAGH7B,EAAa1E,SAqGhB,yBAAK9C,UAAU,UA/DZiG,EAEG,oCACN,yBAAKjG,UAAU,UAAf,8BAd4B,WAC9B,IAAKiG,EAAmB,OAAO,KAE/B,IAAIqD,EAA+B,GAInC,OAHArD,EAAkBgB,SAAQ,SAACN,GACzB2C,EAAcpC,KAAKe,EAAwBtB,OAEtC2C,EAUJC,GACApD,EAAiB,kBAACzD,EAAA,EAAD,CAASC,UAAU,WAAa,yBAAK3C,UAAU,WAC/D,kBAACiC,EAAA,EAAD,CACEjC,UAAU,SACVwB,KAAK,SACLU,QAAQ,UACRC,QAAS,kBAAM4E,EAAcd,KAJ/B,UAQA,kBAAChE,EAAA,EAAD,CACEjC,UAAU,SACVwB,KAAK,SACLU,QAAQ,YACRC,QAAS,kBAAM+D,EAAqB,QAJtC,SAQA,kBAACjE,EAAA,EAAD,CACEjC,UAAU,SACVwB,KAAK,SACLU,QAAQ,SACRC,QAAS,kBAAM4E,EAAcd,EAAmB,CRtOlC,8CQkOhB,6BAxB2B,MAkE7B,6BACE,kBAAC,IAAD,CACEuD,OAAQnD,EACRoD,eAAgBlC,EAChBmC,MAAO,CACLC,QAAS,CACPC,OAAQ,OACRC,MAAO,SApMZtD,EAGH,oCACE,kBAACtE,EAAA,EAAD,CAAQC,QAAS,oBAAqBC,QAASoF,GAA/C,SAGA,yBAAKvH,UAAU,cACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UAAf,8BAGCuG,EAAUuD,MAAMjH,KAAI,SAAC8D,GAAD,OACnB,6BACGA,OAIP,yBAAK3G,UAAU,UACb,yBAAKA,UAAU,UAAf,mBAGA,4BACGuG,EAAUwD,QAAQlH,KAAI,SAACmH,GAAD,OACrB,yBAAKhK,UAAU,YACZgK,QAKT,yBAAKhK,UAAU,UACb,yBAAKA,UAAU,UAAf,iBAGA,4BACGuG,EAAU0D,MAAMpH,KAAI,SAACqH,GAAD,OACnB,yBAAKlK,UAAU,YACZkK,UArCQ,U,8CC2GZC,EApKgB,SAAC5I,GAAkB,IAE9C6I,EAQE7I,EARF6I,WACAC,EAOE9I,EAPF8I,eACAC,EAME/I,EANF+I,cACA/H,EAKEhB,EALFgB,QACAC,EAIEjB,EAJFiB,cACA+H,EAGEhJ,EAHFgJ,aACAC,EAEEjJ,EAFFiJ,UACAC,EACElJ,EADFkJ,cAgCIC,EAAyB,SAACD,GAAD,MAC7B,CACE,CACEE,MAAO,eACPlF,QAASZ,EAAGC,OAAOC,SAASC,aAC5BjD,MAAO0I,EAAczF,cAEvB,CACE2F,MAAO,eACPlF,QAASZ,EAAGC,OAAOC,SAASE,aAC5BlD,MAAO0I,EAAcxF,cAEvB,CACE0F,MAAO,SACPlF,QAASZ,EAAGC,OAAOC,SAASG,OAC5BnD,MAAO0I,EAAcvF,QAEvB,CACEyF,MAAO,mBACPlF,QAASZ,EAAGC,OAAOC,SAASI,iBAC5BpD,MAAO0I,EAActF,kBAEvB,CACEwF,MAAO,WACPlF,QAASZ,EAAGC,OAAOC,SAASK,SAC5BrD,MAAO0I,EAAcrF,UAEvB,CACEuF,MAAO,WACPlF,QAASZ,EAAGC,OAAOC,SAASM,SAC5BtD,MAAO0I,EAAcpF,UAAa,IAEpC,CACEsF,MAAO,cACPlF,QAASZ,EAAGC,OAAOC,SAASO,YAC5BvD,MAAO0I,EAAczF,cAEvB,CACE2F,MAAO,UACPlF,QAASZ,EAAGC,OAAOC,SAASQ,QAC5BxD,MAAO0I,EAAclF,WAKrBqF,EAAqB,SAACD,EAAelF,EAAiB1D,GAAjC,OACzB,oCACE,0BAAM/B,UAAU,mBAAmB2K,GACnC,kBAAC,IAAD,CAASA,MAAOlF,GACd,kBAACoF,EAAA,EAAD,CAAc7K,UAAW,YAAa8K,SAAS,WAEjD,kBAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,OAAO,EAAOlJ,MAAOA,EAAOmJ,IAAK,MA2ChDC,EAAgB,SAACC,GAAD,OACnBA,EAAOxI,OAEJwI,EAAOC,KAAK,MADZ,sDAIN,OACE,yBAAKrL,UAAU,QACb,yBAAKA,UAAU,UAAf,8CAGA,kBAAC,EAAD,CACEqB,YAAawD,EAAGC,OAAOzD,YACvBQ,OAAQ0I,IAEV,yBAAKvK,UAAU,gBACb,yBAAKA,UAAU,UACZsC,EAA8BC,EAASC,GA5I3B,SAACM,GAAD,OACnB,yBAAKnB,IAAKmB,EAAOqE,KACf,yBAAKnH,UAAU,UACb,yBAAKA,UAAU,mBACb,yBACEA,UAAU,YACVG,IAAK2C,EAAOwI,MAAMpD,OAAO,GAAGC,IAC5B9H,IAAG,oBAAeyC,EAAOwI,MAAM7D,QAEjC,kBAACxF,EAAA,EAAD,CACEjC,UAAU,gBACVkC,QAAQ,OACRC,QAAS,kBAAMmI,EAAcxH,EAAOqE,IAAKrE,EAAO2E,KAAM3E,EAAOiH,QAAQ,GAAG5C,IAAKrE,EAAOiH,QAAQ,GAAGtC,QAE/F,kBAAC8D,EAAA,EAAD,CAAYvL,UAAU,sBAG1B,6BAASA,UAAU,eACjB,2BACG8C,EAAO2E,MAEV,6BACG3E,EAAOiH,QAAQ,GAAGtC,KADrB,WAC8B3E,EAAOwI,MAAM7D,aAwH7C,yBAAKzH,UAAU,UA1DQ,WAC3B,IC5G0B2B,EAAa6J,ED6GvC,OAAQf,EACL,6BACC,kDAAuB,0BAAMzK,UAAU,QAAQwK,GAA/C,KACA,qCChHsB7I,EDgHE8I,EAAc9I,IChHH6J,EDgHQf,EAAce,KC/GvD,GAAN,OAGJ,SAA2B7J,GACvB,OAAQA,GACJ,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,IACX,KAAK,GACD,MAAO,QACX,KAAK,GACD,MAAO,KA5BL8J,CAAkB9J,GAA5B,YAgCJ,SAA4BA,GACxB,OAAQA,GACJ,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,SArCqB+J,CAAmBF,MDgHnD,sCAAYf,EAAckB,OAC1B,8CAAoBlB,EAAcmB,gBAClC,yBAAK5L,UAAU,iBACb,yBAAKA,UAAU,kBACZ0K,EAAuBD,GAAeoB,MAAM,EAThC,GASiDhJ,KAAI,SAAAiJ,GAAU,OAAIlB,EAC9EkB,EAAWnB,MACXmB,EAAWrG,QACXqG,EAAW/J,WAGf,yBAAK/B,UAAU,kBACZ0K,EAAuBD,GAAeoB,MAhB1B,GAgB8ChJ,KACzD,SAAAiJ,GAAU,OAAIlB,EACZkB,EAAWnB,MACXmB,EAAWrG,QACXqG,EAAW/J,aAIX,KAkCLgK,GACC1B,GAAkBI,EAAgB,6BAAQ,KA/BlDJ,EACE,6BACE,yDAA8B,0BAAMrK,UAAU,QAAQoK,GAAtD,KACA,uCAAae,EAAcd,EAAee,SAC1C,0CAAgBf,EAAe2B,UAAUhE,MAAMiE,kBAC/C,2CAAiB5B,EAAe6B,aAEhC,SE9FOC,EAtDgB,WAAO,IAAD,EACCtG,mBAAS,IADV,mBAC5BuE,EAD4B,KAChBgC,EADgB,OAESvG,mBAA2C,MAFpD,mBAE5BwE,EAF4B,KAEZgC,EAFY,OAGOxG,mBAA4B,MAHnC,mBAG5BrD,EAH4B,KAGbsD,EAHa,OAILD,oBAAS,GAJJ,mBAI5BtD,EAJ4B,KAInB+J,EAJmB,OAKDzG,mBAAS,IALR,mBAK5B2E,EAL4B,KAKjB+B,EALiB,OAMO1G,mBAA0C,MANjD,mBAM5B4E,EAN4B,KAMb+B,EANa,KAQ7B/F,EAAoB,IAAInD,EAkBxBmJ,EAAqB,SAAC5I,EAAkB2G,GAC5C/D,EAAkBgG,mBAAmB5I,GAAUS,MAAK,SAAAgD,GAClDkF,EAAiBlF,GACjBiF,EAAa/B,OAIXkC,EAAsB,SAAC5I,EAAmBsG,GAC9C3D,EAAkBiG,oBAAoB5I,GAAWQ,MAAK,SAAAgD,GACpD+E,EAAkB/E,GAClB8E,EAAchC,OAIlB,OACE,kBAAC,EAAD,CACEA,WAAYA,EACZC,eAAgBA,EAChBC,cAvBkB,SAACzG,EAAkB2G,EAAmB1G,EAAmBsG,GAC7EqC,EAAmB5I,EAAU2G,GAC7BkC,EAAoB5I,EAAWsG,IAsB7B7H,QAASA,EACTC,cAAeA,EACf+H,aArCiB,SAACxB,GACfA,IAGLuD,GAAW,GACX7F,EAAkBkG,aAAa5D,GAAOzE,MAAK,SAAAgD,GACzCxB,EAAiBwB,EAAKS,OAAOqB,OAC7BkD,GAAW,QA+BX9B,UAAWA,EACXC,cAAeA,KC5BNmC,G,MAvBe,SAACrL,GAAkB,IACvCsL,EAAyBtL,EAAzBsL,WAAYC,EAAavL,EAAbuL,UAEpB,OACE,yBAAK9M,UAAU,QACb,yBAAKA,UAAU,UAAf,mCAGA,0LAGE,6BACA,2BAAI6M,GACJ,6BACA,6BANF,2DAQE,6BARF,IASKC,EAAUC,MATf,OAS0B,8BAAM,2BAAKD,EAAUE,aCMtCC,EAzBe,WAC5B,IAAMxG,EAAoB,IAAInD,EADI,EAGEuC,mBAAS,IAHX,mBAG3BgH,EAH2B,KAGfK,EAHe,OAIArH,mBAAS,IAJT,mBAI3BiH,EAJ2B,KAIhBK,EAJgB,KAiBlC,OAXAC,qBAAU,WACR3G,EAAkBoG,aAAavI,MAAK,SAAAgD,GAClC4F,EAAc5F,EAAKyF,UAErBtG,EAAkBqG,YAAYxI,MAAK,SAAAgD,GACjC6F,EAAa7F,QAGd,IAID,kBAAC,EAAD,CACEwF,UAAWA,EACXD,WAAYA,K,MCFHQ,MAdf,WACE,OACE,yBAAKrN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsN,KAAMxN,EAAeyN,UAAWpB,IACvC,kBAAC,IAAD,CAAOmB,KAAMxN,EAAgByN,UAAW3H,IACxC,kBAAC,IAAD,CAAO0H,KAAMxN,EAAcyN,UAAWN,IACtC,kBAAC,IAAD,CAAOhN,OAAK,EAACqN,KAAMxN,EAAayN,UAAWjN,OCP/BkN,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9J,MAAK,SAAA+J,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09dd1a38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black-logo.5e670a4b.png\";","module.exports = __webpack_public_path__ + \"static/media/green-logo.feb227e2.png\";","export enum ENVIRONMENTS {\n  DEV=\"development\",\n  PROD=\"production\",\n}\n\nexport const DEAN_URI = 'spotify/playlist/0ndBAQglIRXPRdh2SDXfcD';\n\nexport const BASE_NAME = '/spotify-accessor-for-metadata';\n\nexport const ROUTES = {\n  HOME: '/',\n  SEARCH: '/search',\n  COMPARE: '/compare',\n  RUBIN: '/rubin',\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport { ROUTES } from 'src/constants';\nimport greenLogo from 'src/static/green-logo.png'\nimport './Navbar.css'\n\nexport const Navbar = () => {\n  return (\n    <div className='navbar'>\n      <NavLink exact className='logo' to={ROUTES.HOME}>\n        <img className='logo-img' src={greenLogo} alt={'Logo for S.A.M.'}/>\n        <h1 className='title'>Spotify Accessor for Metadata</h1>\n      </NavLink>\n      <ul className='links'>\n        <li>\n          <NavLink exact to={ROUTES.HOME}>HOME</NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.SEARCH}>SEARCH</NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.COMPARE}>COMPARE PLAYLISTS</NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.RUBIN}>RUBIN</NavLink>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Navbar;","import React from 'react'\n\nimport blackLogo from 'src/static/black-logo.png'\nimport packageJson from '../../../package.json'\nimport './Homepage.css'\n\nconst Homepage = () => {\n  const BASE_URL = 'https://github.com/deantorkelson/spotify-accessor-for-metadata'\n\n  const getReadmeLink = () => {\n    let readmeLink = `${BASE_URL}/blob/master/README.md`;\n    return <a className='readme' href={readmeLink}>readme</a>;\n  }\n\n  const getGithubIssuesLink = () => {\n    let githubIssuesLink = `${BASE_URL}/issues`;\n    return <a className='readme' href={githubIssuesLink}>Github Issues</a>\n  }\n\n  return (\n    <div className='page'>\n      <div>\n        <h1><br /><br />Welcome to the Spotify Accessor for Metadata v{packageJson.version}!</h1>\n        <div className='main-text'>\n          <h3>\n            This website was designed to allow you to do more with the metadata stored by Spotify. It's still in development, so please refer to the {getReadmeLink()} or {getGithubIssuesLink()} to see what's in store!\n          </h3>\n        </div>\n      </div>\n      <img className='main-logo' src={blackLogo} alt='Spotify Accessor for Metadata logo' />\n    </div>\n  )\n}\n\nexport default Homepage;","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport blackLogo from 'src/static/black-logo.png'\nimport './TextInput.css'\n\ninterface TextInputProps {\n  placeholder: string;\n  submit: any;\n}\n\nexport class TextInput extends React.Component<TextInputProps, {}> {\n  private text = '';\n\n  render() {\n    return (\n      <Form className='input' inline>\n        <Form.Control\n          className='text-input'\n          placeholder={this.props.placeholder}\n          type=\"text\" \n          onKeyPress={(event: any) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              this.props.submit();\n            }\n          }}\n          onChange={(value: any) =>\n            this.text = value.target.value\n          }\n        />\n        <Button className='submit' type=\"button\" variant=\"outline-success\" onClick={() => this.props.submit(this.text)}>\n          <img className='submit-img' src={blackLogo} alt='Submit' />\n        </Button>\n      </Form>\n    )\n  }\n}\n\nexport default TextInput;","import Spinner from 'react-bootstrap/Spinner';\nimport React from 'react';\nimport { Nullable } from 'src/types/types';\n\nexport function createSearchResultList <T>(loading: boolean, searchResults: Nullable<T[]>, formatter: (result: T, ...args: any[]) => JSX.Element) {\n  if (loading) {\n    return (<div>\n      <Spinner animation='border'/>\n      <div>\n        *note that the first search might take extra time while the Heroku dyno spins up.\n      </div>\n    </div>);\n  }\n  if (searchResults) {\n    if (!searchResults.length) {\n      return (<div key='-1'>No search results found.</div>)\n    }\n    return (\n      <div className='result-list'>\n        {searchResults.map((result: T, index) => formatter(result, index))}\n      </div>\n    );\n  }\n  return null;\n}\n","const spotifyUriRegex = /(spotify[/:]playlist[/:]([a-zA-Z0-9]+)[,\\s]+)+(spotify[/:]playlist[/:]([a-zA-Z0-9]+))/\n\nexport const isUriList = (str: string): boolean => (\n  spotifyUriRegex.test(str)\n)\n\nexport const parseUriFromLink = (link: string): string => {\n  const withoutQueryParams = link.split('?')[0];\n  const playlistId = withoutQueryParams.split('/').pop();\n  return `spotify:playlist:${playlistId}`;\n}\n\nexport const parseUriListFromLinks = (query: string): string[] => {\n  const links = query.split(',');\n  return links.map((link) => parseUriFromLink(link));\n}\n\nexport const isPlaylistLink = (query: string) => {\n  return query.includes('open.spotify.com/playlist');\n}","import { ENVIRONMENTS } from 'src/constants';\nimport { ArtistMetadataResponse } from 'src/models/api/ArtistMetadataResponse';\nimport { SearchTracksResponse } from 'src/models/api/SearchTracksResponse';\nimport { TrackMetadataResponse } from 'src/models/api/TrackMetadataResponse';\nimport { SearchPlaylistsResponse } from 'src/models/api/SearchPlaylistsResponse';\nimport { ComparePlaylistsResponse } from 'src/models/api/ComparePlaylistsResponse';\nimport { Playlist } from 'src/models/Playlist';\nimport { BookQuoteResponse } from 'src/models/api/BookQuoteResponse';\nimport { RubinResponse } from 'src/models/api/RubinResponse';\n\nenum HttpMethod {\n  GET = 'GET',\n  POST = 'POST'\n}\n\nexport class SpotifyApiService {\n  readonly api_url: string;\n\n  constructor() {\n    if (process.env.NODE_ENV === ENVIRONMENTS.DEV) {\n      this.api_url = 'http://0.0.0.0:5001/'\n    } else {\n      this.api_url = 'https://sam-backend-d60bd9ccf7b8.herokuapp.com/'\n    }\n  }\n\n  public searchTracks(searchQuery: string): Promise<SearchTracksResponse> {\n    return this.get(this.api_url + `/search/tracks?q=${searchQuery}`);\n  }\n\n  public searchPlaylists(searchQuery: string): Promise<SearchPlaylistsResponse> {\n    return this.get(this.api_url + `/search/playlists?q=${searchQuery}`);\n  }\n\n  public playlistDetails(playlistUri: string): Promise<Playlist> {\n    return this.get(this.api_url + `/playlist/${playlistUri}`);\n  }\n\n  public fetchTrackMetadata(trackUri: string): Promise<TrackMetadataResponse> {\n    return this.get(this.api_url + `/track/${trackUri}`);\n  }\n\n  public fetchArtistMetadata(artistUri: string): Promise<ArtistMetadataResponse> {\n    return this.get(this.api_url + `/artist/${artistUri}`);\n  }\n\n  public comparePlaylists(playlistUris: string[]): Promise<ComparePlaylistsResponse> {\n    const body = JSON.stringify({\n      \"uris\": playlistUris\n    })\n    return this.post(this.api_url + '/playlists/compare', body);\n  }\n\n  public rubinQuote(): Promise<RubinResponse> {\n    return this.get(this.api_url + `/random/rubin`);\n  }\n\n  public bookQuote(): Promise<BookQuoteResponse> {\n    return this.get(this.api_url + `/random/book_quote`);\n  }\n\n  public get(endpoint: string): Promise<any> {\n    return fetch(endpoint).then((response: any) => response.json());\n  }\n\n  public post(endpoint: string, body: string): Promise<any> {\n    let options = {\n      method: HttpMethod.POST,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body,\n    }\n    return fetch(endpoint, options).then((response: any) => response.json());\n  }\n}\n\nexport default SpotifyApiService;","export const en = {\n  search: {\n    tooltips: {\n      acousticness: 'A confidence measure from 0.0 to 1.0 of whether the track is acoustic.',\n      danceability: 'Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.',\n      energy: 'Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.',\n      instrumentalness: 'Predicts whether a track contains no vocals. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.',\n      liveness: 'Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.',\n      loudness: 'The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.',\n      speechiness: 'Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.',\n      valence: 'A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track.'\n    },\n    placeholder: 'Enter the name of a song or artist...'\n  },\n  playlistCompare: {\n    placeholder: 'Search for a playlist...',\n    tooltip: 'This would look like \"https://open.spotify.com/playlist/5YfQFj40rrMiUp5hutvfH6\"',\n  }\n\n}\n\nexport default en;","import React, { useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Modal from 'react-modal';\nimport { AddBox, IndeterminateCheckBox } from '@material-ui/icons';\n\nimport TextInput from 'src/components/TextInput/TextInput'\nimport { DEAN_URI } from 'src/constants';\nimport { createSearchResultList } from 'src/components/ResultList/ResultList';\nimport { isPlaylistLink, parseUriFromLink } from 'src/helpers/helpers';\nimport { ComparePlaylistsResponse } from 'src/models/api/ComparePlaylistsResponse';\nimport { Playlist } from 'src/models/Playlist'\nimport SpotifyApiService from 'src/utils/api/SpotifyApiService/SpotifyApiService'\nimport en from 'src/static/additionalStrings';\nimport { Nullable } from 'src/types/types';\nimport './PlaylistCompare.css'\nimport '../ResultList.css'\n\nlet he = require('he');\n\nexport const PlaylistCompare = () => {\n  const [searchResults, setSearchResults] = useState<Nullable<Playlist[]>>(null);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [selectedPlaylists, setSelectedPlaylists] = useState<Nullable<Set<Playlist>>>(null);\n  const [compareLoading, setCompareLoading] = useState(false);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalData, setModalData] = useState<Nullable<ComparePlaylistsResponse>>(null);\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const addPlaylist = (playlist: Playlist) => {\n    let playlists = new Set(selectedPlaylists)\n    playlists.add(playlist);\n    setSelectedPlaylists(playlists);\n  }\n\n  const removePlaylist = (playlist: Playlist) => {\n    let playlists = new Set(selectedPlaylists)\n    playlists.delete(playlist);\n    setSelectedPlaylists(playlists.size ? playlists : null);\n  }\n\n  const searchSubmit = (query: string) => {\n    if (query) {\n      // if words, search for words\n      // if list of links, parse out the URIs and send to the backend\n      if (isPlaylistLink(query)) {\n        setSearchLoading(true);\n        const playlistUri = parseUriFromLink(query);\n        spotifyApiService.playlistDetails(playlistUri).then(data => {\n          addPlaylist(data);\n        });\n        setSearchLoading(false);\n      } else {\n        setSearchLoading(true)\n        spotifyApiService.searchPlaylists(query).then(data => {\n          setSearchResults(data.playlists.items);\n          setSearchLoading(false);\n        });\n      }\n    }\n  }\n\n  const compareSubmit = (playlists: Set<Playlist>, additional: string[] = []) => {\n    setCompareLoading(true);\n    let playlistUris = additional;\n    playlists.forEach((playlist: Playlist) => {\n      playlistUris.push(playlist.uri)\n    })\n    playlistUris.concat(additional);\n    spotifyApiService.comparePlaylists(playlistUris).then(data => {\n      setCompareLoading(false);\n      setModalIsOpen(true);\n      setModalData(data);\n    });\n  }\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  }\n\n  const commonPlaylistData = () => {\n    if (!modalData) return null;\n\n    return (\n      <>\n        <Button variant={'outline-secondary'} onClick={closeModal}>\n          Close\n        </Button>\n        <div className='modal-body'>\n          <div className='column-30'>\n            <div className='header'>\n              Comparing these playlists:\n            </div>\n            {modalData.names.map((playlist: string) => (\n              <div>\n                {playlist}\n              </div>\n            ))}\n          </div>\n          <div className='column'>\n            <div className='header'>\n              Common artists:\n            </div>\n            <ul>\n              {modalData.artists.map((artist: string) =>\n                <div className='modal-li'>\n                  {artist}\n                </div>\n              )}\n            </ul>\n          </div>\n          <div className='column'>\n            <div className='header'>\n              Common songs:\n            </div>\n            <ul>\n              {modalData.songs.map((song: string) =>\n                <div className='modal-li'>\n                  {song}\n                </div>\n              )}\n            </ul>\n          </div>\n        </div>\n      </>\n    )\n  }\n\n  const playlistText = (playlist: Playlist) => (\n    <div className='result-text'>\n      <div>\n        <b>{playlist.name}</b> by {playlist.owner.display_name}\n      </div>\n      {\n        playlist.description &&\n        <div>\n          {\n            he.decode(playlist.description).length > 140\n              ? he.decode(playlist.description).substring(0, 140) + '...'\n              : he.decode(playlist.description)\n          }\n        </div>\n      }\n      <div>\n        {playlist.tracks.total} songs\n      </div>\n    </div>\n  )\n\n  const displaySearchResult = (result: Playlist) => (\n    <div key={result.uri}>\n      <div className='result'>\n        <div className='image-container'>\n          <img\n            className='cover-img'\n            src={result.images[0].url}\n            alt={`Cover for ${result.name}`}\n          />\n          <Button\n            className='result-button'\n            variant='link'\n            onClick={() => addPlaylist(result)}\n          >\n            <AddBox/>\n          </Button>\n        </div>\n        {playlistText(result)}\n      </div>\n    </div>\n  );\n\n  const displaySelectedPlaylist = (result: Playlist) => (\n    <div key={result.uri}>\n      <div className='result'>\n        <div className='image-container'>\n          <img\n            className='cover-img'\n            src={result.images[0].url}\n            alt={`Cover for ${result.name}`}\n          />\n          <Button\n            className='result-button'\n            variant='link'\n            onClick={() => removePlaylist(result)}\n          >\n            <IndeterminateCheckBox />\n          </Button>\n        </div>\n        {playlistText(result)}\n      </div>\n    </div>\n  );\n\n  const renderSelectedPlaylists = () => {\n    if (!selectedPlaylists) return null;\n\n    let playlistItems: JSX.Element[] = [];\n    selectedPlaylists.forEach((playlist: Playlist) => {\n      playlistItems.push(displaySelectedPlaylist(playlist));\n    });\n    return playlistItems;\n  }\n\n  const displaySelectedPlaylistsColumn = () => {\n    if (!selectedPlaylists) return null;\n\n    return (<>\n      <div className='header'>\n        Comparing these playlists:\n      </div>\n      {renderSelectedPlaylists()}\n      {compareLoading ? <Spinner animation='border'/> : <div className=\"buttons\">\n        <Button\n          className=\"submit\"\n          type=\"button\"\n          variant=\"success\"\n          onClick={() => compareSubmit(selectedPlaylists)}\n        >\n          Submit\n        </Button>\n        <Button\n          className=\"submit\"\n          type=\"button\"\n          variant=\"secondary\"\n          onClick={() => setSelectedPlaylists(null)}\n        >\n          Clear\n        </Button>\n        <Button\n          className=\"submit\"\n          type=\"button\"\n          variant=\"danger\"\n          onClick={() => compareSubmit(selectedPlaylists, [DEAN_URI])}\n        >\n          Compare to Dean's music\n        </Button>\n      </div>}\n    </>)\n  }\n\n  const renderTooltip = (props: any) => (\n    <Tooltip {...props}>\n    {en.playlistCompare.tooltip}\n    </Tooltip>\n  )\n\n  return <div className='page'>\n    <div className='header'>\n      Enter the name of the playlist to search for, <br/>or a&nbsp;\n      <OverlayTrigger\n        placement=\"right\"\n        delay={{show: 100, hide: 400}}\n        overlay={renderTooltip}\n      >\n        <span className=\"uri-tooltip\">\n          link to a playlist:\n        </span>\n      </OverlayTrigger>\n    </div>\n    <TextInput\n      placeholder={en.playlistCompare.placeholder}\n      submit={searchSubmit}\n    />\n    <div className='main-content'>\n      <div className='column'>\n        {createSearchResultList<Playlist>(searchLoading, searchResults, displaySearchResult)}\n      </div>\n      <div className='column'>\n        {displaySelectedPlaylistsColumn()}\n      </div>\n      <div>\n        <Modal\n          isOpen={modalIsOpen}\n          onRequestClose={closeModal}\n          style={{\n            content: {\n              margin: 'auto',\n              width: '75%'\n            },\n          }}\n        >\n          {commonPlaylistData()}\n        </Modal>\n      </div>\n    </div>\n  </div>\n}\n\nexport default PlaylistCompare;","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Slider from '@material-ui/core/Slider'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { InfoOutlined, Visibility } from '@material-ui/icons';\n\nimport TextInput from 'src/components/TextInput/TextInput'\nimport { ArtistMetadataResponse } from 'src/models/api/ArtistMetadataResponse';\nimport { TrackMetadataResponse, getKeyAndMode } from 'src/models/api/TrackMetadataResponse';\nimport { Track } from 'src/models/Track';\nimport { AudioFeatureSliderData, Nullable } from 'src/types/types';\nimport en from 'src/static/additionalStrings'\nimport './Search.css'\nimport '../ResultList.css'\nimport { createSearchResultList } from 'src/components/ResultList/ResultList';\n\ninterface Props {\n  artistName: string;\n  artistMetadata: Nullable<ArtistMetadataResponse>;\n  fetchMetadata: (trackUri: string, trackName: string, artistUri: string, artistName: string) => void;\n  loading: boolean;\n  searchResults: Nullable<Track[]>;\n  searchSubmit: (query: string) => void;\n  trackName: string;\n  trackMetadata: Nullable<TrackMetadataResponse>;\n}\n\nexport const SearchPresenter = (props: Props) => {\n  const {\n    artistName,\n    artistMetadata,\n    fetchMetadata,\n    loading,\n    searchResults,\n    searchSubmit,\n    trackName,\n    trackMetadata\n  } = props;\n\n  const searchResult = (result: Track) => (\n    <div key={result.uri}>\n      <div className='result'>\n        <div className='image-container'>\n          <img\n            className='cover-img'\n            src={result.album.images[0].url}\n            alt={`Cover for ${result.album.name}`}\n          />\n          <Button\n            className='result-button'\n            variant='link'\n            onClick={() => fetchMetadata(result.uri, result.name, result.artists[0].uri, result.artists[0].name)}\n          >\n            <Visibility className='select-logo-img'/>\n          </Button>\n        </div>\n        <section className='result-text'>\n          <b>\n            {result.name}\n          </b>\n          <div>\n            {result.artists[0].name} • {result.album.name}\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n\n  const audioFeatureSliderData = (trackMetadata: TrackMetadataResponse): AudioFeatureSliderData[] => (\n    [\n      {\n        title: 'Acousticness',\n        tooltip: en.search.tooltips.acousticness,\n        value: trackMetadata.acousticness,\n      },\n      {\n        title: 'Danceability',\n        tooltip: en.search.tooltips.danceability,\n        value: trackMetadata.danceability,\n      },\n      {\n        title: 'Energy',\n        tooltip: en.search.tooltips.energy,\n        value: trackMetadata.energy,\n      },\n      {\n        title: 'Instrumentalness',\n        tooltip: en.search.tooltips.instrumentalness,\n        value: trackMetadata.instrumentalness,\n      },\n      {\n        title: 'Liveness',\n        tooltip: en.search.tooltips.liveness,\n        value: trackMetadata.liveness,\n      },\n      {\n        title: 'Loudness',\n        tooltip: en.search.tooltips.loudness,\n        value: trackMetadata.loudness / (-60),\n      },\n      {\n        title: 'Speechiness',\n        tooltip: en.search.tooltips.speechiness,\n        value: trackMetadata.acousticness,\n      },\n      {\n        title: 'Valence',\n        tooltip: en.search.tooltips.valence,\n        value: trackMetadata.valence,\n      },\n    ]\n  )\n\n  const audioFeatureSlider = (title: string, tooltip: string, value: number) => (\n    <>\n      <span className='attribute-title'>{title}</span>\n      <Tooltip title={tooltip}>\n        <InfoOutlined className={'info-icon'} fontSize='small'/>\n      </Tooltip>\n      <Slider disabled track={false} value={value} max={1}/>\n    </>\n  )\n\n  const displayTrackMetadata = () => {\n    const columnLength = 4;\n    return (trackMetadata ?\n      (<div>\n        <h3>Audio features for <span className='name'>{trackName}</span>:</h3>\n        <h5>Key: {getKeyAndMode(trackMetadata.key, trackMetadata.mode)}</h5>\n        <h5>Tempo: {trackMetadata.tempo}</h5>\n        <h5>Beats/measure: {trackMetadata.time_signature}</h5>\n        <div className='value-sliders'>\n          <div className='reduced-column'>\n            {audioFeatureSliderData(trackMetadata).slice(0, columnLength).map(sliderData => audioFeatureSlider(\n              sliderData.title,\n              sliderData.tooltip,\n              sliderData.value\n            ))}\n          </div>\n          <div className='reduced-column'>\n            {audioFeatureSliderData(trackMetadata).slice(columnLength).map(\n              sliderData => audioFeatureSlider(\n                sliderData.title,\n                sliderData.tooltip,\n                sliderData.value\n              ))}\n          </div>\n        </div>\n      </div>) : null);\n  };\n\n  const displayArtistMetadata = () => (\n    artistMetadata ? (\n      <div>\n        <h3>Additional information on <span className='name'>{artistName}</span>:</h3>\n        <h5>Genres: {displayGenres(artistMetadata.genres)}</h5>\n        <h5>Followers: {artistMetadata.followers.total.toLocaleString()}</h5>\n        <h5>Popularity: {artistMetadata.popularity}</h5>\n      </div>\n    ) : null\n  );\n\n  const displayGenres = (genres: string[]) => (\n    !genres.length\n      ? 'No genre information is available for this artist.'\n      : genres.join(', ')\n  );\n\n  return (\n    <div className='page'>\n      <div className='header'>\n        Enter the name of the track to search for:\n      </div>\n      <TextInput\n        placeholder={en.search.placeholder}\n        submit={searchSubmit}\n      />\n      <div className='main-content'>\n        <div className='column'>\n          {createSearchResultList<Track>(loading, searchResults, searchResult)}\n        </div>\n        <div className='column'>\n          {displayTrackMetadata()}\n          {(artistMetadata && trackMetadata ? <hr/> : null)}\n          {displayArtistMetadata()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchPresenter;","export interface TrackMetadataResponse {\n    duration_ms: number;\n    key: number;\n    mode: number;\n    time_signature: number;\n    acousticness: number,\n    danceability: number,\n    energy: number,\n    instrumentalness: number,\n    liveness: number,\n    loudness: number,\n    speechiness: number,\n    valence: number,\n    tempo: number,\n}\n\nexport function getKeyAndMode(key: number, mode: number): string {\n    return `${keyNumberToString(key)} ${modeNumberToString(mode)}`\n}\n\nfunction keyNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"C\";\n        case 1:\n            return \"C#/Db\"\n        case 2:\n            return \"D\"\n        case 3:\n            return \"D#/Eb\";\n        case 4:\n            return \"E\"\n        case 5:\n            return \"F\"\n        case 6:\n            return \"F#/Gb\";\n        case 7:\n            return \"G\"\n        case 8:\n            return \"G#/Ab\"\n        case 9:\n            return \"A\";\n        case 10:\n            return \"A#/Bb\"\n        case 11:\n            return \"B\"\n    }\n}\n\nfunction modeNumberToString(key: number) {\n    switch (key) {\n        case 0:\n            return \"minor\";\n        case 1:\n            return \"major\"\n    }\n}\n","import React, {useState} from 'react';\n\nimport { ArtistMetadataResponse } from 'src/models/api/ArtistMetadataResponse';\nimport { TrackMetadataResponse } from 'src/models/api/TrackMetadataResponse';\nimport { Track } from 'src/models/Track';\nimport SearchPresenter from 'src/pages/Search/SearchPresenter';\nimport SpotifyApiService from 'src/utils/api/SpotifyApiService/SpotifyApiService';\nimport './Search.css';\nimport '../ResultList.css';\nimport { Nullable } from 'src/types/types';\n\nexport const SearchContainer = () => {\n  const [artistName, setArtistName] = useState('');\n  const [artistMetadata, setArtistMetadata] = useState<Nullable<ArtistMetadataResponse>>(null);\n  const [searchResults, setSearchResults] = useState<Nullable<Track[]>>(null);\n  const [loading, setLoading] = useState(false);\n  const [trackName, setTrackName] = useState('');\n  const [trackMetadata, setTrackMetadata] = useState<Nullable<TrackMetadataResponse>>(null);\n\n  const spotifyApiService = new SpotifyApiService();\n\n  const searchSubmit = (query: string) => {\n    if (!query) {\n      return;\n    }\n    setLoading(true);\n    spotifyApiService.searchTracks(query).then(data => {\n      setSearchResults(data.tracks.items);\n      setLoading(false);\n    });\n  };\n\n  const fetchMetadata = (trackUri: string, trackName: string, artistUri: string, artistName: string) => {\n    fetchTrackMetadata(trackUri, trackName);\n    fetchArtistMetadata(artistUri, artistName);\n  }\n\n  const fetchTrackMetadata = (trackUri: string, trackName: string) => {\n    spotifyApiService.fetchTrackMetadata(trackUri).then(data => {\n      setTrackMetadata(data);\n      setTrackName(trackName);\n    });\n  };\n\n  const fetchArtistMetadata = (artistUri: string, artistName: string) => {\n    spotifyApiService.fetchArtistMetadata(artistUri).then(data => {\n      setArtistMetadata(data);\n      setArtistName(artistName);\n    });\n  };\n\n  return (\n    <SearchPresenter\n      artistName={artistName}\n      artistMetadata={artistMetadata}\n      fetchMetadata={fetchMetadata}\n      loading={loading}\n      searchResults={searchResults}\n      searchSubmit={searchSubmit}\n      trackName={trackName}\n      trackMetadata={trackMetadata}\n    />\n  )\n}\n\nexport default SearchContainer;\n","import React from 'react';\n\nimport { BookQuoteResponse } from 'src/models/api/BookQuoteResponse';\nimport './Rubin.css';\n\ninterface Props {\n  rubinQuote: string;\n  bookQuote: BookQuoteResponse;\n}\nexport const RubinPresenter = (props: Props) => {\n  const { rubinQuote, bookQuote} = props;\n\n  return (\n    <div className='page'>\n      <div className='header'>\n        Let the hands of fate guide you\n      </div>\n      <div>\n        Rick Rubin keeps a library of books in his recording studio. If you're stuck, grab a book and find a random quote\n        and let it inspire you. Rubin also said,\n        <br/>\n        <i>{rubinQuote}</i>\n        <br/>\n        <br/>\n        May this quote help you resolve your creative conundrum:\n        <br/>\n        \"{ bookQuote.quote }\" - <span><i>{ bookQuote.author }</i></span>\n      </div>\n    </div>\n  )\n}\n\nexport default RubinPresenter;\n","import React, { useState, useEffect } from 'react';\n\nimport { BookQuoteResponse } from 'src/models/api/BookQuoteResponse';\nimport RubinPresenter from 'src/pages/Rubin/RubinPresenter';\nimport SpotifyApiService from 'src/utils/api/SpotifyApiService/SpotifyApiService';\nimport './Rubin.css';\n\nexport const RubinContainer = () => {\n  const spotifyApiService = new SpotifyApiService();\n\n  const [rubinQuote, setRubinQuote] = useState('');\n  const [bookQuote, setBookQuote] = useState({} as BookQuoteResponse);\n\n  useEffect(() => {\n    spotifyApiService.rubinQuote().then(data => {\n      setRubinQuote(data.quote);\n    });\n    spotifyApiService.bookQuote().then(data => {\n      setBookQuote(data);\n    })\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n\n  return (\n    <RubinPresenter\n      bookQuote={bookQuote}\n      rubinQuote={rubinQuote}\n    />\n  )\n}\n\nexport default RubinContainer;\n","import React from 'react';\nimport { HashRouter as Switch, Route } from 'react-router-dom';\n\nimport Navbar from 'src/components/Navbar/Navbar';\nimport { ROUTES } from 'src/constants';\nimport Homepage from 'src/pages/Homepage/Homepage'\nimport PlaylistCompare from 'src/pages/PlaylistCompare/PlaylistCompare'\nimport SearchContainer from 'src/pages/Search/SearchContainer'\nimport RubinContainer from 'src/pages/Rubin/RubinContainer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Navbar/>\n      <Switch>\n        <Route path={ROUTES.SEARCH} component={SearchContainer}/>\n        <Route path={ROUTES.COMPARE} component={PlaylistCompare}/>\n        <Route path={ROUTES.RUBIN} component={RubinContainer}/>\n        <Route exact path={ROUTES.HOME} component={Homepage}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from 'src/App';\nimport * as serviceWorker from 'src/serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}